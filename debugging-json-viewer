# HG changeset patch
# Parent  cad4f204b5578ab52285f12a07cb753d74cf11ec

diff --git a/devtools/client/jsonview/Sniffer.sys.mjs b/devtools/client/jsonview/Sniffer.sys.mjs
--- a/devtools/client/jsonview/Sniffer.sys.mjs
+++ b/devtools/client/jsonview/Sniffer.sys.mjs
@@ -44,7 +44,7 @@ export class Sniffer {
         request.loadFlags & Ci.nsIChannel.LOAD_DOCUMENT_URI &&
         getContentDisposition(request) != Ci.nsIChannel.DISPOSITION_ATTACHMENT
       ) {
-        console.log("Checking if HAR", request, request.loadInfo, request.loadFlags, request.unstrippedURI);
+        // console.log("Checking if HAR", request, request.loadInfo, request.loadFlags, request.unstrippedURI);
 
         // Check the response content type and if it's a valid type
         // such as application/json or application/manifest+json
diff --git a/devtools/client/jsonview/converter-child.js b/devtools/client/jsonview/converter-child.js
--- a/devtools/client/jsonview/converter-child.js
+++ b/devtools/client/jsonview/converter-child.js
@@ -9,6 +9,9 @@ ChromeUtils.defineESModuleGetters(lazy, 
   NetUtil: "resource://gre/modules/NetUtil.sys.mjs",
 });
 
+// Cu.importGlobalProperties(["DecompressionStream", "Response"]);
+const JSZip = require("resource://devtools/client/shared/vendor/jszip.js");
+
 const {
   getTheme,
   addThemeObserver,
@@ -26,6 +29,89 @@ const BufferStream = Components.Construc
   "setData"
 );
 
+ChromeUtils.defineLazyGetter(this, "nsGzipConverter", () =>
+  Components.Constructor(
+    "@mozilla.org/streamconv;1?from=gzip&to=uncompressed",
+    "nsIStreamConverter"
+  )
+);
+
+
+// /**
+//  * Loads the contents of a file into a string and passes that to a callback.
+//  *
+//  * @param aFilename
+//  *        The name of the file being read from.
+//  * @param aTitleNote
+//  *        A description to put in the page title upon completion.
+//  * @param aFn
+//  *        The function to call and pass the read string to upon completion.
+//  */
+// function loadMemoryReportsFromFile(aFilename, aTitleNote, aFn) {
+//   updateMainAndFooter("Loading...", NO_TIMESTAMP, HIDE_FOOTER);
+
+//   try {
+//     let reader = new FileReader();
+//     reader.onerror = () => {
+//       throw new Error("FileReader.onerror");
+//     };
+//     reader.onabort = () => {
+//       throw new Error("FileReader.onabort");
+//     };
+//     reader.onload = aEvent => {
+//       // Clear "Loading..." from above.
+//       updateTitleMainAndFooter(aTitleNote, "", NO_TIMESTAMP, SHOW_FOOTER);
+//       aFn(aEvent.target.result);
+//     };
+
+//     // If it doesn't have a .gz suffix, read it as a (legacy) ungzipped file.
+//     if (!aFilename.endsWith(".gz")) {
+//       File.createFromFileName(aFilename).then(file => {
+//         reader.readAsText(file);
+//       });
+//       return;
+//     }
+
+//     // Read compressed gzip file.
+//     let converter = new nsGzipConverter();
+//     converter.asyncConvertData(
+//       "gzip",
+//       "uncompressed",
+//       {
+//         data: [],
+//         onStartRequest() {},
+//         onDataAvailable(aR, aStream, aO, aCount) {
+//           let bi = new nsBinaryStream(aStream);
+//           this.data.push(bi.readBytes(aCount));
+//         },
+//         onStopRequest(aR, aC, aStatusCode) {
+//           try {
+//             if (!Components.isSuccessCode(aStatusCode)) {
+//               throw new Components.Exception(
+//                 "Error while reading gzip file",
+//                 aStatusCode
+//               );
+//             }
+//             reader.readAsText(new Blob(this.data));
+//           } catch (ex) {
+//             handleException(ex);
+//           }
+//         },
+//       },
+//       null
+//     );
+
+//     let file = new nsFile(aFilename);
+//     let fileChan = NetUtil.newChannel({
+//       uri: Services.io.newFileURI(file),
+//       loadUsingSystemPrincipal: true,
+//     });
+//     fileChan.asyncOpen(converter);
+//   } catch (ex) {
+//     handleException(ex);
+//   }
+// }
+
 const kCSP = "default-src 'none'; script-src resource:; img-src 'self';";
 
 // Localization
@@ -80,6 +166,11 @@ Converter.prototype = {
     // Decode and insert data.
     const buffer = new ArrayBuffer(count);
     new BinaryInput(inputStream).readArrayBuffer(count, buffer);
+    // let buf = Buffer.from(buffer)
+    // const isLikelyGzip = offset === 0 && buf[0] === 0x1f && buf[1] === 0x8b;
+    // console.log("LIKELY GZIP?", isLikelyGzip, offset, count, buf, buf[0], buf[1], buf.length);
+    
+
     this.decodeAndInsertBuffer(buffer);
   },
 
@@ -141,6 +232,65 @@ Converter.prototype = {
     }
 
     this.data = exportData(win, headers);
+
+
+    // var zip = new JSZip();
+    // console.log(zip, JSZip.ungzip)
+    // zip.loadAsync(this.data.json.data).then((zip) => {
+    //   console.log("zip", zip);
+    // }, (err) => {
+    //   console.error(err);
+    // });
+
+    
+
+    // async function decompressBlob(blob) {
+    //   let ds = new DecompressionStream("gzip");
+    //   let decompressedStream = blob.stream().pipeThrough(ds);
+    //   return await new Response(decompressedStream).text();
+    // }
+
+    // decompressBlob(new Blob([this.data.json])).then((text) => {
+    //   console.log(text);
+    // }, (err) => {
+    //   console.error(err);
+    // });
+
+
+    // // Check if data.json is zipped
+    // decompressBlob
+
+    
+    // console.log(new nsGzipConverter())
+    // nsGzipConverter.asyncConvertData(
+    //   "gzip",
+    //   "uncompressed",
+    //   {
+    //     data: [],
+    //     onStartRequest() {},
+    //     onDataAvailable(request, stream, offset, count) {
+    //       console.log("Exporting data on data available", count);
+    //       const buffer = new ArrayBuffer(count);
+    //       new BinaryInput(stream).readArrayBuffer(count, buffer);
+    //       this.data.push(buffer);
+    //     },
+    //     onStopRequest(request, statusCode) {
+    //       if (Components.isSuccessCode(statusCode)) {
+    //         const buffer = new ArrayBuffer(this.data.length);
+    //         const view = new Uint8Array(buffer);
+    //         let offset = 0;
+    //         for (const chunk of this.data) {
+    //           view.set(new Uint8Array(chunk), offset);
+    //           offset += chunk.byteLength;
+    //         }
+    //         this.decodeAndInsertBuffer(buffer, true);
+    //       }
+    //     },
+    //   },
+    //   null
+    // );
+
+    console.log("Exporting data stop request", this.data.json, headers);
     insertJsonData(win, this.data.json);
     win.addEventListener("contentMessage", onContentMessage, false, true);
     keepThemeUpdated(win);
diff --git a/devtools/client/jsonview/json-viewer.js b/devtools/client/jsonview/json-viewer.js
--- a/devtools/client/jsonview/json-viewer.js
+++ b/devtools/client/jsonview/json-viewer.js
@@ -33,6 +33,7 @@ define(function (require) {
     expandedNodes: new Set(),
   };
 
+  // console.log("Is gzipped", isGzipped(jsonText));
   /**
    * Application actions/commands. This list implements all commands
    * available for the JSON viewer.
@@ -168,6 +169,34 @@ define(function (require) {
         });
     }
 
+
+    function isGzipped(input) {
+    // Convert the input string to a Uint8Array
+    const bytes = Uint8Array.from(input, c => c.charCodeAt(0));
+
+    // Check the first two bytes for the gzip signature
+    return bytes[0] === 0x1f && bytes[1] === 0x8b;
+    }
+
+    // console.log(btoa(input.jsonText.textContent))
+    // console.log(atob(input.jsonText.textContent))
+    console.log(input.jsonText.textContent.length)
+    console.log(Uint8Array.from(input.jsonText.textContent, c => c.charCodeAt(0)));
+    console.log(isGzipped(input.jsonText.textContent));
+
+    async function decompressBlob(blob) {
+    let ds = new DecompressionStream("gzip");
+    let decompressedStream = blob.stream().pipeThrough(ds);
+    return await new Response(decompressedStream).text();
+    }
+
+    // decompressBlob(new Blob([input.jsonText.textContent])).then((text) => {
+    decompressBlob(new Blob([Uint8Array.from(input.jsonText.textContent)])).then((text) => {
+      console.log(text);
+    }, (err) => {
+      console.error(err);
+    });
+
     // If the JSON has been loaded, parse it immediately before loading the app.
     const jsonString = input.jsonText.textContent;
     try {
diff --git a/js/xpconnect/src/xpcprivate.h b/js/xpconnect/src/xpcprivate.h
--- a/js/xpconnect/src/xpcprivate.h
+++ b/js/xpconnect/src/xpcprivate.h
@@ -2225,6 +2225,9 @@ struct GlobalProperties {
   bool Window : 1;
   bool XMLSerializer : 1;
   bool ReadableStream : 1;
+  bool DecompressionStream : 1;
+  bool CompressionStream : 1;
+  bool Response : 1;
 
   // Ad-hoc property names we implement.
   bool atob : 1;
