# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1665592117 25200
#      Wed Oct 12 09:28:37 2022 -0700
# Node ID 47186b0041f4c4d7174bcd8afea4b1ad869e4200
# Parent  28bf7ae3c042d0d9d1fb8ac4d4fd464c137b9573
POC - Grouping tabs by container with a sidebar

Differential Revision: https://phabricator.services.mozilla.com/D159187

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -2652,6 +2652,9 @@ pref("browser.toolbars.bookmarks.showOth
 // Felt Privacy pref to control simplified private browsing UI
 pref("browser.privatebrowsing.felt-privacy-v1", false);
 
+// Visibility of the containers in a window in a sidebar
+pref("browser.toolbars.container_ui", true);
+
 // Prefs to control the Firefox Account toolbar menu.
 // This pref will surface existing Firefox Account information
 // as a button next to the hamburger menu. It allows
diff --git a/browser/base/content/browser-box.inc.xhtml b/browser/base/content/browser-box.inc.xhtml
--- a/browser/base/content/browser-box.inc.xhtml
+++ b/browser/base/content/browser-box.inc.xhtml
@@ -8,6 +8,7 @@
     <box id="vertical-tabs" slot="tabstrip" customizable="true" contextmenu="toolbar-context-menu"></box>
   </html:sidebar-main>
   </box>
+  <hbox id="containerui-sidebar-spacer"></hbox>
   <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
     <box id="sidebar-header" align="center">
       <toolbarbutton id="sidebar-switcher-target" class="tabbable" aria-expanded="false">
diff --git a/browser/base/content/browser-containerui.js b/browser/base/content/browser-containerui.js
new file mode 100644
--- /dev/null
+++ b/browser/base/content/browser-containerui.js
@@ -0,0 +1,184 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// TODO: handle default container with no tabs but still clicking on it
+// -- or just make sure it gets hidden
+// TODO: be smarter with state transitions for keyboard a11y
+// TODO: detect new containers a la https://addons.mozilla.org/en-US/firefox/addon/temporary-containers/
+// TODO: Remember which tab was selected in any given container. Is there a most recently used cache already?
+// TODO: sometimes "switch to tab" from awesomebar doesn't work
+
+// set lastMultiSelectedTab(aTab) {
+//   this._lastMultiSelectedTabRef = Cu.getWeakReference(aTab);
+// },
+
+var ContainerUI = {
+  _iconForUserContext: new Map(),
+  show() {
+    if (this.initialized) {
+      this.visible = true;
+      document.documentElement.setAttribute("containerui", "true");
+    }
+  },
+  hide() {
+    this.visible = false;
+    document.documentElement.removeAttribute("containerui");
+  },
+  uninit() {
+    this.initialized = false;
+    this.hide();
+  },
+  init() {
+    if (this.initialized) {
+      return;
+    }
+    this.initialized = true;
+    this.populateContainerList();
+    this.updateContainerList();
+    document.addEventListener("TabOpen", e => {
+      this.updateContainerList();
+    });
+    document.addEventListener("TabClose", e => {
+      this.updateContainerList();
+    });
+    document.addEventListener("TabSelect", e => {
+      this.updateContainerList();
+    });
+    document.addEventListener("TabAttrModified", e => {
+      this.updateContainerList();
+    });
+  },
+
+  // Todo respond to container changes
+  populateContainerList() {
+    let sidebarContainer = document.querySelector("#containerui-sidebar");
+    sidebarContainer.textContent = "";
+    this._iconForUserContext = new Map();
+
+    // TODO: don't dig around internals here and export identities w/ ensured data as public
+    ContextualIdentityService.ensureDataReady();
+    // console.log(ContextualIdentityService._identities);
+
+    const getIcon = userContextId => {
+      if (this._iconForUserContext.has(userContextId)) {
+        return this._iconForUserContext.get(userContextId);
+      }
+
+      let icon = this.createContainerIcon(userContextId);
+      this._iconForUserContext.set(userContextId, icon);
+      return icon;
+    };
+
+    let defaultContainerIcon = getIcon(0);
+    sidebarContainer.append(defaultContainerIcon);
+    for (let identity of ContextualIdentityService._identities) {
+      let icon = getIcon(identity.userContextId);
+      sidebarContainer.append(icon);
+    }
+  },
+
+  updateContainerList() {
+    let userContextToTabs = new Map();
+    let selectedUserContextId = gBrowser.selectedTab.userContextId;
+    let needsRepopulate = false;
+    // Todo expose from gBrowser?
+    for (let t of gBrowser.tabs) {
+      let { userContextId, closing } = t;
+      if (closing) {
+        continue;
+      }
+      if (!userContextToTabs.has(userContextId)) {
+        userContextToTabs.set(userContextId, []);
+      }
+      userContextToTabs.get(userContextId).push(t);
+
+      if (!this._iconForUserContext.has(userContextId)) {
+        needsRepopulate = true;
+      }
+    }
+
+    // If we have a new container added that the UI doesn't know about yet,
+    // just blow away and recreate the sidebar icons before setting state.
+    if (needsRepopulate) {
+      this.populateContainerList();
+    }
+
+    if (userContextToTabs.size === 1 && userContextToTabs.has(0)) {
+      this.hide();
+    } else {
+      this.show();
+    }
+
+    for (let [userContextId, container] of this._iconForUserContext.entries()) {
+      container.hidden = !userContextToTabs.has(userContextId);
+      if (userContextToTabs.has(userContextId)) {
+        let selected = userContextId == selectedUserContextId;
+        if (selected) {
+          container.setAttribute("selected", "true");
+        } else {
+          container.removeAttribute("selected");
+        }
+      }
+    }
+
+    this.selectUserContextId(selectedUserContextId);
+  },
+
+  createContainerIcon(userContextId) {
+    let identity =
+      ContextualIdentityService.getPublicIdentityFromId(userContextId);
+    let container = document.createElement("div");
+    let input = document.createElement("input");
+    input.classList.add("userContext-icon");
+
+    if (identity) {
+      input.classList.add(`identity-color-${identity.color}`);
+      input.classList.add(`identity-icon-${identity.icon}`);
+
+      let label = ContextualIdentityService.getUserContextLabel(userContextId);
+      input.setAttribute("title", label);
+    } else {
+      input.classList.add(`default-container`);
+    }
+
+    input.setAttribute("type", "radio");
+    input.name = "container";
+    input.value = userContextId;
+    input.onchange = () => {
+      // console.log("Input change", input.value, input.checked);
+      this.selectUserContextId(userContextId);
+    };
+    container.append(input);
+    return container;
+  },
+
+  selectUserContextId(userContextId) {
+    // console.trace(userContextId);
+    let selectNewTab = false;
+    for (let t of gBrowser.tabs) {
+      if (t.userContextId !== userContextId) {
+        if (t == gBrowser.selectedTab) {
+          selectNewTab = true;
+        }
+        gBrowser.hideTab(t);
+      } else {
+        gBrowser.showTab(t);
+      }
+    }
+
+    if (selectNewTab) {
+      for (let t of gBrowser.tabs) {
+        if (t.userContextId === userContextId) {
+          let oldTab = gBrowser.selectedTab;
+          gBrowser.selectedTab = t;
+          gBrowser.hideTab(oldTab);
+          break;
+        }
+      }
+    }
+
+    // Needed when showing the normal tabbrowser to reset pinned area size
+    gBrowser.tabContainer._positionPinnedTabs();
+  },
+};
diff --git a/browser/base/content/browser-init.js b/browser/base/content/browser-init.js
--- a/browser/base/content/browser-init.js
+++ b/browser/base/content/browser-init.js
@@ -136,6 +136,10 @@ var gBrowserInit = {
     delete window._gBrowser;
     gBrowser.init();
 
+    if (gContainerUIEnabled) {
+      ContainerUI.init();
+    }
+
     BrowserWindowTracker.track(window);
 
     FirefoxViewHandler.init();
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -522,6 +522,23 @@ ChromeUtils.defineLazyGetter(this, "Win7
 
 XPCOMUtils.defineLazyPreferenceGetter(
   this,
+  "gContainerUIEnabled",
+  "browser.toolbars.container_ui",
+  false,
+  (aPref, aOldVal, aNewVal) => {
+    if (window.closed) {
+      return;
+    }
+    if (aNewVal) {
+      ContainerUI.init();
+    } else {
+      ContainerUI.uninit();
+    }
+  }
+);
+
+XPCOMUtils.defineLazyPreferenceGetter(
+  this,
   "gToolbarKeyNavEnabled",
   "browser.toolbars.keyboard_navigation",
   false,
@@ -4365,6 +4382,7 @@ nsBrowserAccess.prototype = {
         let userContextId = aOpenWindowInfo
           ? aOpenWindowInfo.originAttributes.userContextId
           : openingUserContextId;
+
         let browser = this._openURIInNewTab(
           aURI,
           referrerInfo,
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -110,6 +110,7 @@
   Services.scriptloader.loadSubScript("chrome://browser/content/browser-init.js", this);
   Services.scriptloader.loadSubScript("chrome://global/content/contentAreaUtils.js", this);
   Services.scriptloader.loadSubScript("chrome://browser/content/browser-captivePortal.js", this);
+  Services.scriptloader.loadSubScript("chrome://browser/content/browser-containerui.js", this);
   if (AppConstants.MOZ_DATA_REPORTING) {
     Services.scriptloader.loadSubScript("chrome://browser/content/browser-data-submission-info-bar.js", this);
   }
@@ -167,6 +168,9 @@
 
 #include navigator-toolbox.inc.xhtml
 
+  <html:div id="containerui-sidebar">
+  </html:div>
+
 #include browser-box.inc.xhtml
 
   <html:template id="customizationPanel">
@@ -174,7 +178,6 @@
 #include ../../components/customizableui/content/customizeMode.inc.xhtml
     ]]></box>
   </html:template>
-
 #include fullscreen-and-pointerlock.inc.xhtml
 
   <html:div id="a11y-announcement" role="alert"/>
diff --git a/browser/base/jar.mn b/browser/base/jar.mn
--- a/browser/base/jar.mn
+++ b/browser/base/jar.mn
@@ -40,6 +40,7 @@ browser.jar:
         content/browser/browser-captivePortal.js      (content/browser-captivePortal.js)
         content/browser/browser-commands.js           (content/browser-commands.js)
         content/browser/browser-context.js            (content/browser-context.js)
+        content/browser/browser-containerui.js        (content/browser-containerui.js)
         content/browser/browser-customization.js      (content/browser-customization.js)
         content/browser/browser-data-submission-info-bar.js (content/browser-data-submission-info-bar.js)
 #ifndef MOZILLA_OFFICIAL
diff --git a/browser/components/tabbrowser/content/tabbrowser.js b/browser/components/tabbrowser/content/tabbrowser.js
--- a/browser/components/tabbrowser/content/tabbrowser.js
+++ b/browser/components/tabbrowser/content/tabbrowser.js
@@ -397,8 +397,10 @@
     },
 
     get pinnedTabCount() {
-      for (var i = 0; i < this.tabs.length; i++) {
-        if (!this.tabs[i].pinned) {
+      // XXX: We allow hidden pinned within container
+      let tabs = this.visibleTabs;
+      for (var i = 0; i < tabs.length; i++) {
+        if (!tabs[i].pinned) {
           break;
         }
       }
@@ -3032,6 +3034,12 @@
         userContextId = openerTab.getAttribute("usercontextid") || 0;
       }
 
+      // Make a new tab inherit the currently selected tab's container.
+      // Todo: Maybe make this read some global state on which container is selected instead?
+      if (gContainerUIEnabled && userContextId == null && !openerTab) {
+        userContextId = gBrowser.selectedTab.userContextId;
+      }
+
       if (!noInitialLabel) {
         if (isBlankPageURL(uriString)) {
           t.setAttribute("label", this.tabContainer.emptyTabTitle);
@@ -5262,7 +5270,7 @@
     hideTab(aTab, aSource) {
       if (
         aTab.hidden ||
-        aTab.pinned ||
+        (!gContainerUIEnabled && aTab.pinned) ||
         aTab.selected ||
         aTab.closing ||
         // Tabs that are sharing the screen, microphone or camera cannot be hidden.
diff --git a/browser/components/tabbrowser/content/tabs.js b/browser/components/tabbrowser/content/tabs.js
--- a/browser/components/tabbrowser/content/tabs.js
+++ b/browser/components/tabbrowser/content/tabs.js
@@ -1683,7 +1683,9 @@
       let tabs = this.visibleTabs;
       let numPinned = gBrowser.pinnedTabCount;
       let absPositionHorizontalTabs =
-        this.overflowing && tabs.length > numPinned && numPinned > 0;
+        this.overflowing &&
+        this._getVisibleTabs().length > numPinned &&
+        numPinned > 0;
 
       this.toggleAttribute("haspinnedtabs", !!numPinned);
       this.toggleAttribute("positionpinnedtabs", absPositionHorizontalTabs);
diff --git a/browser/themes/shared/sidebar.css b/browser/themes/shared/sidebar.css
--- a/browser/themes/shared/sidebar.css
+++ b/browser/themes/shared/sidebar.css
@@ -214,6 +214,81 @@ menuseparator + #sidebar-extensions-sepa
   list-style-image: var(--webextension-menuitem-image, inherit) !important;
 }
 
+/* These live here because image loads don't go through otherwise,
+ * see bug 1855151 */
+:root[containerui="true"] {
+  --containerui-sidebar-width: 56px;
+  --containerui-sidebar-offset-top: calc(calc(var(--toolbarbutton-outer-padding) * 2) + var(--tab-min-height) + var(--tab-block-margin));
+}
+
+:root[containerui="true"]  #customization-container {
+  margin-inline-start: var(--containerui-sidebar-width);
+}
+
+:root[containerui="true"] .tabbrowser-tab[pinned][hidden] {
+  /* TODO: this probably needs to move into JS to make sure tabbrowser is calculating positions
+     correctly */
+  display: none !important;
+}
+
+:root:not([containerui="true"]) #containerui-sidebar,
+:root:not([containerui="true"]) #containerui-sidebar-spacer {
+  display: none;
+}
+
+#containerui-sidebar-spacer,
+#containerui-sidebar {
+  width: var(--containerui-sidebar-width);
+}
+
+:root[containerui="true"] #navigator-toolbox > *:not(#titlebar) {
+  /* Todo: set this dynamically */
+  margin-inline-start: 56px;
+}
+
+#container-overlay {
+  -moz-box-flex: 1;
+}
+
+#containerui-sidebar {
+  top: var(--containerui-sidebar-offset-top);
+  bottom: 0;
+  left: 0;
+  position: absolute;
+  background: var(--toolbar-bgcolor);
+  color: var(--toolbar-color);
+  z-index: 2;
+}
+
+#containerui-sidebar input {
+  -moz-appearance: none;
+  width: 48px;
+  height: 32px;
+  margin: 5px 3px;
+  padding: 0;
+  /* margin-bottom: 16px; */
+  /* margin: 16px 0; */
+  border-left: solid 2px transparent;
+}
+
+#containerui-sidebar input.default-container {
+  --identity-icon: url("chrome://browser/skin/fxa/avatar-empty.svg");
+  --identity-tab-color: #ccc;
+  --identity-icon-color: #ccc;
+}
+
+#containerui-sidebar div[selected] input {
+  border-left: solid 2px var(--identity-icon-color);
+}
+
+/* Set additional backgrounds alignment relative to toolbox */
+
+#navigator-toolbox:-moz-lwtheme {
+  background-image: var(--lwt-additional-images);
+  background-repeat: var(--lwt-background-tiling);
+}
+
+
 /* Sidebar animation */
 
 #sidebar-main,
