# HG changeset patch
# Parent  2c9f37ff7f0d76a31beb333db9e00e3afc264e32

diff --git a/browser/components/sessionstore/PageWireframes.sys.mjs b/browser/components/sessionstore/PageWireframes.sys.mjs
--- a/browser/components/sessionstore/PageWireframes.sys.mjs
+++ b/browser/components/sessionstore/PageWireframes.sys.mjs
@@ -21,7 +21,9 @@ export const PageWireframes = {
       return null;
     }
     const sessionHistory = lazy.SessionStore.getSessionHistory(tab);
-    return sessionHistory?.entries[sessionHistory.index]?.wireframe;
+    const wireframe = sessionHistory?.entries[sessionHistory.index]?.wireframe;
+    console.log(wireframe.width, wireframe.height, wireframe.version);
+    return (wireframe?.width && wireframe?.height) ? wireframe : null;
   },
 
   /**
@@ -64,6 +66,12 @@ export const PageWireframes = {
    *   The rendered wireframe
    */
   getWireframeElement(wireframe, document) {
+    console.log(
+      "getWireframeElement",
+      wireframe.version,
+      wireframe.width,
+      wireframe.height
+    );
     const SVG_NS = "http://www.w3.org/2000/svg";
     let svg = document.createElementNS(SVG_NS, "svg");
 
diff --git a/dom/base/Document.cpp b/dom/base/Document.cpp
--- a/dom/base/Document.cpp
+++ b/dom/base/Document.cpp
@@ -15336,9 +15336,21 @@ void Document::GetWireframeWithoutFlushi
     return;
   }
 
+
+  nsRect visibleArea = pc->GetVisibleArea();
+  if (visibleArea.IsEmpty()) {
+    return;
+  }
+
   auto& wireframe = aWireframe.SetValue();
   wireframe.mCanvasBackground = shell->ComputeCanvasBackground().mViewportColor;
 
+
+  CSSSize visibleAreaCSS = CSSPixel::FromAppUnits(visibleArea.Size());
+  wireframe.mWidth = visibleAreaCSS.width;
+  wireframe.mHeight = visibleAreaCSS.height;
+  // printf_stderr("wireframe size %s: %dx%d\n", GetDocumentURI()->GetSpecOrDefault().get(), wireframe.mWidth, wireframe.mHeight);
+
   FrameForPointOptions options;
   options.mBits += FrameForPointOption::IgnoreCrossDoc;
   options.mBits += FrameForPointOption::IgnorePaintSuppression;
@@ -15346,8 +15358,7 @@ void Document::GetWireframeWithoutFlushi
 
   AutoTArray<nsIFrame*, 32> frames;
   const RelativeTo relativeTo{rootFrame, mozilla::ViewportType::Layout};
-  nsLayoutUtils::GetFramesForArea(relativeTo, pc->GetVisibleArea(), frames,
-                                  options);
+  nsLayoutUtils::GetFramesForArea(relativeTo, visibleArea, frames, options);
 
   // TODO(emilio): We could rewrite hit testing to return nsDisplayItem*s or
   // something perhaps, but seems hard / like it'd involve at least some extra
diff --git a/dom/base/test/test_document_wireframe.html b/dom/base/test/test_document_wireframe.html
--- a/dom/base/test/test_document_wireframe.html
+++ b/dom/base/test/test_document_wireframe.html
@@ -80,6 +80,8 @@
       `,
       expectedWireframe: {
         canvasBackground: RED_NSCOLOR,
+        width: 800,
+        height: 600,
         rects: [{
           color: BLACK_NSCOLOR,
           height: 12,
@@ -113,6 +115,8 @@
       `,
       expectedWireframe: {
         canvasBackground: RED_NSCOLOR,
+        width: 800,
+        height: 600,
         rects: [{
           color: GREEN_NSCOLOR,
           height: 20,
@@ -160,6 +164,8 @@
       `,
       expectedWireframe: {
         canvasBackground: RED_NSCOLOR,
+        width: 800,
+        height: 600,
         rects: [{
           color: 0,
           height: 50,
@@ -214,6 +220,8 @@
       `,
       expectedWireframe: {
         canvasBackground: RED_NSCOLOR,
+        width: 800,
+        height: 600,
         rects: [{
           color: 0,
           height: 50,
@@ -245,6 +253,8 @@
       `,
       expectedWireframe: {
         canvasBackground: WHITE_NSCOLOR,
+        width: 800,
+        height: 600,
         rects: [{
           color: RED_NSCOLOR,
           height: 20,
@@ -277,6 +287,8 @@
     function loadInIframe(frame, page) {
       return new Promise(resolve => {
         frame.addEventListener("load", resolve, { once: true });
+        frame.width = 800;
+        frame.height = 600;
         frame.src = page;
       });
     }
@@ -303,6 +315,16 @@
         "Canvas backgrounds match."
       );
       is(
+        wireframe.width,
+        approximateWireframe.width,
+        "Widths match."
+      )
+      is(
+        wireframe.height,
+        approximateWireframe.height,
+        "Heights match."
+      )
+      is(
         wireframe.rects.length,
         approximateWireframe.rects.length,
         "Same rect count"
diff --git a/dom/webidl/Document.webidl b/dom/webidl/Document.webidl
--- a/dom/webidl/Document.webidl
+++ b/dom/webidl/Document.webidl
@@ -746,6 +746,8 @@ dictionary WireframeTaggedRect {
 [GenerateInit]
 dictionary Wireframe {
   unsigned long canvasBackground = 0; // in nscolor format
+  unsigned long width = 0;
+  unsigned long height = 0;
   sequence<WireframeTaggedRect> rects;
   unsigned long version = 1; // Increment when the wireframe structure changes in backwards-incompatible ways
 };
