diff --git a/browser/components/migration/tests/marionette/manifest.ini b/browser/components/migration/tests/marionette/manifest.ini
--- a/browser/components/migration/tests/marionette/manifest.ini
+++ b/browser/components/migration/tests/marionette/manifest.ini
@@ -1,4 +1,5 @@
 [DEFAULT]
 run-if = buildapp == 'browser'
 
 [test_refresh_firefox.py]
+[test_build_content_cache.py]
diff --git a/browser/components/migration/tests/marionette/test_build_content_cache.py b/browser/components/migration/tests/marionette/test_build_content_cache.py
new file mode 100644
--- /dev/null
+++ b/browser/components/migration/tests/marionette/test_build_content_cache.py
@@ -0,0 +1,70 @@
+# -*- coding: utf-8 -*-
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from __future__ import absolute_import
+import textwrap
+import urllib
+import time
+import subprocess
+import shutil
+import os
+import json
+import tempfile
+from urllib.parse import urlparse
+import distutils.dir_util
+
+from marionette_harness.marionette_test import MarionetteTestCase
+
+
+class TestBuildContentCache(MarionetteTestCase):
+    def setUp(self):
+        super(TestBuildContentCache, self).setUp()
+
+    @property
+    def viewport_dimensions(self):
+        return self.marionette.execute_script(
+            "return [window.innerWidth, window.innerHeight];"
+        )
+
+    def save_text_contents(self, url, hash_number, overwrite=False):
+        script = """
+            return document.body.innerText
+        """
+        hash = hex(hash_number)[2:]
+        screen_path = os.path.join(
+            "/Users/greg/lem/sqlite-reader/data/screenshot",
+            hash + "-" + urlparse(url).netloc + ".png",
+        )
+        content_path = os.path.join(
+            "/Users/greg/lem/sqlite-reader/data/text",
+            hash + "-" + urlparse(url).netloc + ".txt",
+        )
+
+        if not overwrite and os.path.exists(content_path):
+            return
+
+        self.marionette.navigate(url)
+
+        time.sleep(1)
+        with open(screen_path, "wb") as fh:
+            self.marionette.save_screenshot(fh, full=False)
+
+        content = self.marionette.execute_script(
+            textwrap.dedent(script), sandbox="system"
+        )
+
+        with open(content_path, "w") as f:
+            f.write(content)
+
+    def test_collection(self):
+        with open("/Users/greg/lem/sqlite-reader/data/list/arstechnica.com.json") as f:
+            entries = json.load(f)
+            f.close()
+
+        for entry in entries:
+            print("Loading", entry["url"])
+            self.save_text_contents(entry["url"], entry["url_hash"])
+
+        self.assertTrue(True)
diff --git a/testing/marionette/mach_commands.py b/testing/marionette/mach_commands.py
--- a/testing/marionette/mach_commands.py
+++ b/testing/marionette/mach_commands.py
@@ -49,11 +49,11 @@
         setattr(args, k, v)
 
     parser.verify_usage(args)
 
     # Causes Firefox to crash when using non-local connections.
-    os.environ["MOZ_DISABLE_NONLOCAL_CONNECTIONS"] = "1"
+    os.environ["MOZ_DISABLE_NONLOCAL_CONNECTIONS"] = "0"
 
     if not args.logger:
         args.logger = commandline.setup_logging(
             "Marionette Unit Tests", args, {"mach": sys.stdout}
         )

