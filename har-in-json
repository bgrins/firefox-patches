# HG changeset patch
# Parent  6ec3ba998cc5e840c2d005e867780ebc80fa5beb

diff --git a/devtools/client/jsonview/Sniffer.sys.mjs b/devtools/client/jsonview/Sniffer.sys.mjs
--- a/devtools/client/jsonview/Sniffer.sys.mjs
+++ b/devtools/client/jsonview/Sniffer.sys.mjs
@@ -44,6 +44,8 @@ export class Sniffer {
         request.loadFlags & Ci.nsIChannel.LOAD_DOCUMENT_URI &&
         getContentDisposition(request) != Ci.nsIChannel.DISPOSITION_ATTACHMENT
       ) {
+        console.log("Checking if HAR", request, request.loadInfo, request.loadFlags, request.unstrippedURI);
+
         // Check the response content type and if it's a valid type
         // such as application/json or application/manifest+json
         // change it to new internal type consumed by JSON View.
diff --git a/devtools/client/jsonview/components/MainTabbedArea.js b/devtools/client/jsonview/components/MainTabbedArea.js
--- a/devtools/client/jsonview/components/MainTabbedArea.js
+++ b/devtools/client/jsonview/components/MainTabbedArea.js
@@ -17,6 +17,9 @@ define(function (require, exports) {
   const { HeadersPanel } = createFactories(
     require("devtools/client/jsonview/components/HeadersPanel")
   );
+  const { RenderPanel } = createFactories(
+    require("devtools/client/jsonview/components/RenderPanel")
+  );
   const { Tabs, TabPanel } = createFactories(
     require("devtools/client/shared/components/tabs/Tabs")
   );
@@ -114,6 +117,18 @@ define(function (require, exports) {
             actions: this.props.actions,
             searchFilter: this.props.searchFilter,
           })
+        ),
+        TabPanel(
+          {
+            id: "render",
+            className: "render",
+            title: JSONView.Locale["jsonViewer.tab.Render"],
+          },
+          RenderPanel({
+            data: this.props.json,
+            actions: this.props.actions,
+            searchFilter: this.props.searchFilter,
+          })
         )
       );
     }
diff --git a/devtools/client/jsonview/components/RenderPanel.js b/devtools/client/jsonview/components/RenderPanel.js
new file mode 100644
--- /dev/null
+++ b/devtools/client/jsonview/components/RenderPanel.js
@@ -0,0 +1,71 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+"use strict";
+
+define(function (require, exports) {
+  const { Component } = require("devtools/client/shared/vendor/react");
+  const PropTypes = require("devtools/client/shared/vendor/react-prop-types");
+  const dom = require("devtools/client/shared/vendor/react-dom-factories");
+
+  const { createFactories } = require("devtools/client/shared/react-utils");
+
+  const { Headers } = createFactories(
+    require("devtools/client/jsonview/components/Headers")
+  );
+  const { HeadersToolbar } = createFactories(
+    require("devtools/client/jsonview/components/HeadersToolbar")
+  );
+
+  const { div, select, option, iframe } = dom;
+
+  /**
+   * This template represents the 'Headers' panel
+   * s responsible for rendering its content.
+   */
+  class RenderPanel extends Component {
+    static get propTypes() {
+      return {
+        actions: PropTypes.object,
+        data: PropTypes.object,
+      };
+    }
+
+    constructor(props) {
+      super(props);
+
+      this.state = {
+        data: {},
+        selectedPage: null,
+      };
+    }
+
+    render() {
+      const data = this.props.data;
+
+      console.log("HERE", data);
+
+      let pages = data.log.pages || [];
+
+      if (!this.state.selectedPage) {
+        this.setState({ selectedPage: pages[0].title });
+      }
+
+      return div(
+        { className: "renderpanelBox tab-panel-inner" },
+        select(
+          { className: "select" },
+          pages.map((page, index) =>
+            option({ value: index, key: index }, page.title)
+          )
+        ),
+        div({ className: "panelContent" }, "Test " + this.state.selectedPage),
+        iframe({ src: "about:blank" })
+      );
+    }
+  }
+
+  // Exports from this module
+  exports.RenderPanel = RenderPanel;
+});
diff --git a/devtools/client/jsonview/components/moz.build b/devtools/client/jsonview/components/moz.build
--- a/devtools/client/jsonview/components/moz.build
+++ b/devtools/client/jsonview/components/moz.build
@@ -14,6 +14,7 @@ DevToolsModules(
     "JsonToolbar.js",
     "LiveText.js",
     "MainTabbedArea.js",
+    "RenderPanel.js",
     "SearchBox.js",
     "TextPanel.js",
     "TextToolbar.js",
diff --git a/devtools/client/jsonview/converter-child.js b/devtools/client/jsonview/converter-child.js
--- a/devtools/client/jsonview/converter-child.js
+++ b/devtools/client/jsonview/converter-child.js
@@ -145,6 +145,14 @@ Converter.prototype = {
     win.addEventListener("contentMessage", onContentMessage, false, true);
     keepThemeUpdated(win);
 
+    // const XUL_NS = "http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul";
+    // let browser = win.document.createElementNS(XUL_NS, "browser");
+    // browser.setAttribute("type", "content");
+    // browser.setAttribute("remote", "true");
+    // browser.setAttribute("disableglobalhistory", "true");
+    // browser.setAttribute("src", url);
+    // win.document.body.appendChild(browser);
+
     // Send the initial HTML code.
     const buffer = new TextEncoder().encode(initialHTML(win.document)).buffer;
     const stream = new BufferStream(buffer, 0, buffer.byteLength);
diff --git a/devtools/client/locales/en-US/jsonview.properties b/devtools/client/locales/en-US/jsonview.properties
--- a/devtools/client/locales/en-US/jsonview.properties
+++ b/devtools/client/locales/en-US/jsonview.properties
@@ -17,6 +17,7 @@
 jsonViewer.tab.JSON=JSON
 jsonViewer.tab.RawData=Raw Data
 jsonViewer.tab.Headers=Headers
+jsonViewer.tab.Render=Render HAR
 
 # LOCALIZATION NOTE (jsonViewer.responseHeaders, jsonViewer.requestHeaders):
 # Label for header groups within the 'Headers' panel.
