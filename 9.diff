diff --git a/browser/components/history-plus/@types/history.d.ts b/browser/components/history-plus/@types/history.d.ts
--- a/browser/components/history-plus/@types/history.d.ts
+++ b/browser/components/history-plus/@types/history.d.ts
@@ -12,6 +12,84 @@
  *
  *   HistoryPlus.TypeName
  */
 declare namespace HistoryPlus {
 
+  /**
+   * A utility function to extract the values from an Object.
+   */
+  type Values<T> = T[keyof T];
+
+  /**
+   * Action creators return an action object. This utility type extracts the returned
+   * type so that the actions don't need to be manually typed.
+   */
+  type ExtractActions<T extends {[key: string]: (...args: any) => any}> = Values<{
+    [FnName in keyof T]: ReturnType<
+      T[FnName]
+    >;
+  }>;
+
+  /**
+   * Automatically extract the action object from the action creators.
+   */
+  export type Action =
+    | ExtractActions<typeof import("../src/actions/plain")>
+    | ExtractActions<typeof import('../src/actions/thunks.js')["PlainInternal"]>;
+
+  export type Reducers = typeof import("../src/reducers");
+  export type State = ReturnType<Reducers["reducers"]>;
+
+  type ThunkDispatch = <Returns>(action: Thunk<Returns>) => Returns;
+  type PlainDispatch = (action: Action) => Action;
+
+  /**
+   * This GetState function knows about the specific State from the store.
+   */
+  export type GetState = () => State;
+
+  type Reducer<S> = (state: S | undefined, action: Action) => S;
+
+  /**
+   * This dispatch is augmented to supports both thunks and plain dispatch.
+   * For more information on thunks see: https://redux.js.org/usage/writing-logic-thunks
+   */
+  export type Dispatch = PlainDispatch & ThunkDispatch;
+
+  /**
+   * This store knows about the HistoryPlus State and Actions.
+   */
+  export type Store = {
+    dispatch: Dispatch;
+    getState(): State;
+    subscribe(listener: () => void): unknown;
+    replaceReducer(nextReducer: Reducer<State>): void;
+  };
+
+  /**
+   * This is the return type for a Thunk action creator.
+   */
+  export type Thunk<Returns = void> = (
+    dispatch: Dispatch,
+    getState: () => State,
+  ) => Returns;
+
+
+  /**
+   * The information returned from a content cache query.
+   */
+  export interface HistoryRow {
+    url: string,
+    title: string,
+    description: string,
+    row: any,
+   }
+
+  type PlacesUtils = (typeof import("resource://gre/modules/PlacesUtils.jsm"))["PlacesUtils"];
+
+  /**
+   * This is the database connection. It's useful to refer to when passing it between functions.
+   */
+  export type Database = Awaited<ReturnType<
+    PlacesUtils["promiseDBConnection"]
+  >>;
 }
diff --git a/browser/components/history-plus/history-plus.css b/browser/components/history-plus/history-plus.css
--- a/browser/components/history-plus/history-plus.css
+++ b/browser/components/history-plus/history-plus.css
@@ -1,3 +1,146 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+body {
+  position: absolute;
+  inset: 0;
+  padding: 40px;
+  font-size: 1.36em;
+}
+
+.history {
+  display: flex;
+  flex-direction: column;
+  max-width: 800px;
+  margin: 0 auto;
+}
+
+.historyTitle {
+  display: flex;
+}
+
+.historyTitleSpan {
+  flex: 1;
+}
+
+.historyTitleClear {
+  font-size: 14px;
+}
+
+.historyInputWrapper {
+  display: flex;
+  flex-direction: column;
+  position: relative;
+}
+
+input.historyInput {
+  padding-left: 35px;
+}
+
+.historyInputIcon {
+  position: absolute;
+  width: 15px;
+  height: 15px;
+  top: 13px;
+  left: 14px;
+  pointer-events: none;
+  -moz-context-properties: fill, fill-opacity;
+  fill: currentColor;
+  fill-opacity: 0.8;
+}
+
+.historyResultsRow {
+  margin: 38px 0;
+}
+
+.historyResultsUrl {
+  margin: 4px 0;
+  font-size: 14px;
+  display: flex;
+  align-items: center;
+}
+
+.historyResultsTitle {
+  display: block;
+  font-size: 21px;
+  white-space: nowrap;
+  width: 100%;
+  overflow: hidden;
+  text-overflow: ellipsis;
+  margin: 5px 0;
+}
+
+.historyResultsFavicon {
+  width: 16px;
+  height: 16px;
+  margin-inline-end: 3px;
+  user-select: none;
+}
+
+.historyResultsDescription {
+  line-height: 1.6;
+}
+
+.historyResultsUrlHost {
+  background: none;
+  padding: 0;
+  margin: 0;
+  border: none;
+  padding-inline: 3px;
+}
+
+.historyResultsUrlSlash {
+  margin-inline-end: 3px;
+}
+
+.historyResultsUrlRest {
+  opacity: 0.7;
+}
+
+.historyHostMenu {
+  display: flex;
+  flex-direction: column;
+  position: absolute;
+  z-index: 1;
+  background: var(--in-content-box-background);
+  padding: 5px;
+  border: 1px solid var(--in-content-border-color);
+  box-shadow: 5px 5px 10px #0006, 5px 5px 14px #0003;
+  border-radius: 6px;
+  margin-top: 33px;
+}
+
+.historyResultsUrlRow {
+  flex: 1;
+  white-space: nowrap;
+  text-overflow: ellipsis;
+  overflow: hidden;
+}
+
+.historyMoreOptions {
+  position: relative;
+  background: none;
+  padding: 0;
+  margin: 0;
+  border: none;
+  padding-inline: 3px;
+  min-width: 30px;
+  border-radius: 100px;
+}
+
+.historyMoreOptionsMenu {
+  display: flex;
+  flex-direction: column;
+  position: absolute;
+  z-index: 1;
+  background: var(--in-content-box-background);
+  padding: 5px;
+  border: 1px solid var(--in-content-border-color);
+  box-shadow: 5px 5px 10px #0006, 5px 5px 14px #0003;
+  border-radius: 6px;
+  margin-top: 33px;
+  top: 0;
+  right: 0;
+  min-width: 200px;
+}
diff --git a/browser/components/history-plus/initializer.js b/browser/components/history-plus/initializer.js
--- a/browser/components/history-plus/initializer.js
+++ b/browser/components/history-plus/initializer.js
@@ -1,4 +1,44 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
 // @ts-check
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+
+import { ReactDOM, React, Redux, ReactRedux } from "./src/vendor.js";
+import { reducers } from "./src/reducers.js";
+import { HistoryPlus } from "./src/components.js";
+import { reduxLogger, thunkMiddleware } from "./src/utils.js";
+
+/** @type {any[]} */
+const middleware = [thunkMiddleware];
+if (Services.prefs.getCharPref("browser.contentCache.logLevel") === "All") {
+  // Only add the logger if it is required, since it fires for every action.
+  middleware.push(reduxLogger);
+}
+
+const store = Redux.createStore(reducers, Redux.applyMiddleware(...middleware));
+
+Object.assign(/** @type {any} */(window), {
+  store,
+  getState: store.getState,
+  dispatch: store.dispatch,
+});
+
+const root = document.querySelector("#root");
+if (!root) {
+  throw new Error("Could not find the root element.");
+}
+
+ReactDOM.render(
+  React.createElement(
+    ReactRedux.Provider,
+    { store },
+    React.createElement(HistoryPlus)
+  ),
+  root
+);
+
+/** @type {any} */ (window).store = store;
+/** @type {any} */ (window).getState = store.getState;
+/** @type {any} */ (window).dispatch = store.dispatch;
diff --git a/browser/components/history-plus/jar.mn b/browser/components/history-plus/jar.mn
--- a/browser/components/history-plus/jar.mn
+++ b/browser/components/history-plus/jar.mn
@@ -4,5 +4,14 @@
 
 browser.jar:
     content/browser/history-plus/history-plus.css      (history-plus.css)
     content/browser/history-plus/index.html            (index.html)
     content/browser/history-plus/initializer.js        (initializer.js)
+
+    content/browser/history-plus/src/actions/index.js  (src/actions/index.js)
+    content/browser/history-plus/src/actions/plain.js  (src/actions/plain.js)
+    content/browser/history-plus/src/actions/thunks.js (src/actions/thunks.js)
+    content/browser/history-plus/src/components.js     (src/components.js)
+    content/browser/history-plus/src/reducers.js       (src/reducers.js)
+    content/browser/history-plus/src/selectors.js      (src/selectors.js)
+    content/browser/history-plus/src/utils.js          (src/utils.js)
+    content/browser/history-plus/src/vendor.js         (src/vendor.js)
diff --git a/browser/components/history-plus/history-plus.css b/browser/components/history-plus/src/actions/index.js
copy from browser/components/history-plus/history-plus.css
copy to browser/components/history-plus/src/actions/index.js
--- a/browser/components/history-plus/history-plus.css
+++ b/browser/components/history-plus/src/actions/index.js
@@ -1,3 +1,6 @@
 /* This Source Code Form is subject to the terms of the Mozilla Public
  * License, v. 2.0. If a copy of the MPL was not distributed with this
  * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+export * from "./plain.js";
+export * from "./thunks.js";
diff --git a/browser/components/history-plus/src/actions/plain.js b/browser/components/history-plus/src/actions/plain.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/actions/plain.js
@@ -0,0 +1,22 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+
+/**
+ * Note that the plain actions require the "type const" line so that the "type"
+ * property is interpretated as a string literal, and not the "string" type.
+ *
+ * https://stackoverflow.com/questions/64559624/jsdoc-equivalent-to-typescripts-as-const
+ */
+
+/**
+ * There needs to be at least one action creator here.
+ */
+export function fakeAction() {
+  return {
+    type: /** @type {const} */ ("fake-action"),
+  };
+}
diff --git a/browser/components/history-plus/src/actions/thunks.js b/browser/components/history-plus/src/actions/thunks.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/actions/thunks.js
@@ -0,0 +1,184 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+import * as Selectors from "../selectors.js";
+import { sql, console } from "../utils.js";
+
+const { PlacesUtils } = ChromeUtils.import(
+  "resource://gre/modules/PlacesUtils.jsm"
+);
+
+/**
+ * These should only be used internally in thunks.
+ */
+export const PlainInternal = {
+  /**
+   * @param {string} search
+   */
+  setSearchString(search) {
+    return {
+      type: /** @type {const} */ ("set-search-string"),
+      search,
+    };
+  },
+
+  /**
+   * @param {HistoryPlus.HistoryRow[]} rows
+   */
+  setHistoryRows(rows) {
+    return {
+      type: /** @type {const} */ ("set-history-rows"),
+      rows,
+    };
+  },
+};
+
+/**
+ * @typedef {{
+ *   host?: string,
+ *   search: string,
+ * }} ParsedSearch
+ */
+
+/**
+ * @param {string} search
+ * @returns {ParsedSearch}
+ */
+function parseSearch(search) {
+  /** @type {ParsedSearch} */
+  const parsedSearch = { search: "" };
+  const regex = /^site:(.*)$/;
+
+  for (const part of search.split(" ")) {
+    const siteResult = regex.exec(part.trim());
+    if (siteResult) {
+      parsedSearch.host = siteResult[1];
+    } else {
+      if (parsedSearch.search.length !== 0) {
+        parsedSearch.search += " ";
+      }
+      parsedSearch.search += part;
+    }
+  }
+  parsedSearch.search = parsedSearch.search.trim();
+  return parsedSearch;
+}
+
+/**
+ * @param {string} searchString
+ * @returns {HistoryPlus.Thunk<Promise<HistoryPlus.HistoryRow[]>>}
+ */
+export function searchHistory(searchString) {
+  return async (dispatch, getState) => {
+    dispatch(PlainInternal.setSearchString(searchString));
+    const { search, host } = parseSearch(searchString);
+    const db = await PlacesUtils.promiseDBConnection();
+    let rows;
+    let revHost = sql``;
+
+    /** @type {{ search: string, revHost?: string }} */
+    const args = { search };
+
+    if (!search) {
+      if (host) {
+        console.log("[db] Searching for only a host", host);
+        const statement = sql`
+        SELECT *
+        FROM moz_places
+        WHERE
+          rev_host LIKE :revHost
+        ORDER BY
+          last_visit_date DESC
+        LIMIT 100
+      `;
+        rows = await statement.run(db, {
+          revHost: `%${PlacesUtils.getReversedHost({ host })}%`,
+        });
+      } else {
+        console.log("[db] Searching all recent history");
+        const statement = sql`
+        SELECT *
+        FROM moz_places
+        ORDER BY
+          last_visit_date DESC
+        LIMIT 100
+      `;
+        rows = await statement.run(db);
+      }
+    } else {
+      if (host) {
+        console.log("[db] Searching a host and text", host, search);
+        args.revHost = `%${PlacesUtils.getReversedHost({ host })}%`;
+        revHost = sql`
+        AND moz_places.rev_host LIKE :revHost
+      `;
+      } else {
+        console.log("[db] Searching text", search);
+      }
+      const statement = sql`
+      SELECT
+        moz_contentcache_text.text as text,
+        moz_places.url             as url,
+        moz_places.title           as title,
+        snippet(
+          moz_contentcache_text,
+          0,    -- Zero-indexed column
+          '<b>',   -- Insert before text match
+          '</b>',   -- Insert after text match
+          '',   -- The text to add to the start or end of the selected text to indicate
+                -- that the returned text does not occur at the start or end of its
+                -- column, respectively.
+          40    -- 0-64 The maximum number of tokens in the returned text.
+        ) as description
+      FROM moz_contentcache_text
+      LEFT JOIN moz_places
+      ON moz_contentcache_text.rowid = moz_places.id
+      WHERE moz_contentcache_text MATCH :search
+        ${revHost}
+      ORDER BY  rank
+      LIMIT     100
+    `;
+      const now = performance.now();
+      rows = await statement.run(db, args);
+      console.log(
+        "[db] statement took ",
+        Math.round((performance.now() - now) * 100) / 100 + "ms"
+      );
+    }
+
+    const historyRows = rows.map(row => ({
+      url: row.getResultByName("url"),
+      title: row.getResultByName("title"),
+      description: row.getResultByName("description"),
+      row,
+    }));
+
+    dispatch(PlainInternal.setHistoryRows(historyRows));
+    return historyRows;
+  };
+}
+
+/**
+ * @param {string} site
+ * @returns {HistoryPlus.Thunk<Promise<HistoryPlus.HistoryRow[]>>}
+ */
+export function addSiteToSearchString(site) {
+  return async (dispatch, getState) => {
+    const oldSearch = Selectors.getSearchString(getState());
+    const index = oldSearch.indexOf("site:");
+    let search = oldSearch;
+    if (index !== -1) {
+      let end = index + "site:".length;
+      for (; end < search.length; end++) {
+        if (search[end] === " " || search[end] === "\t") {
+          break;
+        }
+      }
+      search = (oldSearch.slice(0, index) + oldSearch.slice(end)).trim();
+    }
+    return dispatch(searchHistory((search + " site:" + site).trim() + " "));
+  };
+}
diff --git a/browser/components/history-plus/src/components.js b/browser/components/history-plus/src/components.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/components.js
@@ -0,0 +1,237 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+
+/**
+ * @template P
+ * @typedef {import("react-redux").ResolveThunks<P>} ResolveThunks<P>
+ */
+
+import { React, ReactDOMFactories, ReactRedux } from "./vendor.js";
+const { a, div, h1, input, img, b, span, button } = ReactDOMFactories;
+import * as Actions from "./actions/index.js";
+import * as Selectors from "./selectors.js";
+
+export function HistoryPlus() {
+  const dispatch = ReactRedux.useDispatch();
+  const search = ReactRedux.useSelector(Selectors.getSearchString);
+  const historyRows = ReactRedux.useSelector(Selectors.getHistoryRows);
+
+  React.useEffect(() => {
+    dispatch(Actions.searchHistory(""));
+  }, []);
+
+  return div(
+    { className: `history` },
+    h1(
+      { className: "historyTitle" },
+      span({ className: "historyTitleSpan" }, "History"),
+      button({ className: "historyTitleClear" }, "Clear History")
+    ),
+    div(
+      {
+        className: "historyInputWrapper",
+      },
+      img({
+        src: "chrome://global/skin/icons/search-textbox.svg",
+        className: "historyInputIcon",
+      }),
+      input({
+        type: "text",
+        className: "historyInput",
+        placeholder: "Seach all history",
+        value: search,
+        onChange: event => {
+          // TODO - Debounce.
+          dispatch(Actions.searchHistory(event.target.value));
+        },
+      }),
+      HistoryResults({ historyRows })
+    )
+  );
+}
+
+/**
+ * @param {{ historyRows: HistoryPlus.HistoryRow[] }} props
+ */
+function HistoryResults(props) {
+  const { historyRows } = props;
+  return div(
+    { className: "historyResults" },
+    historyRows.map(({ url, title, description }) =>
+      div(
+        { className: "historyResultsRow" },
+        div(
+          { className: "historyResultsUrl" },
+          img({ src: "page-icon:" + url, className: "historyResultsFavicon" }),
+          React.createElement(DisplayURL, { url }),
+          React.createElement(MoreOptions)
+        ),
+        a(
+          { className: "historyResultsTitle", href: url, target: "_blank" },
+          title || url
+        ),
+        div(
+          { className: "historyResultsDescription" },
+          ApplyBoldTags({ text: description })
+        )
+      )
+    )
+  );
+}
+
+function useOpenCloseBehavior() {
+  const [isOpen, setIsOpen] = React.useState(false);
+  const isOpenRef = React.useRef(isOpen);
+  const keypressHandler = React.useMemo(() => {
+    /**
+     * @param {KeyboardEvent} event
+     */
+    return function handler(event) {
+      if (event.key === "Escape") {
+        setIsOpen(false);
+      }
+    };
+  }, []);
+  const clickHandler = React.useMemo(() => {
+    return () => setIsOpen(false);
+  }, []);
+
+  // Sync the state to a ref.
+  React.useEffect(() => {
+    isOpenRef.current = isOpen;
+  }, [isOpen]);
+
+  React.useEffect(() => {
+    if (isOpen) {
+      window.addEventListener("keypress", keypressHandler);
+      window.addEventListener("click", clickHandler);
+    } else {
+      window.removeEventListener("keypress", keypressHandler);
+      window.removeEventListener("click", clickHandler);
+    }
+    return () => {
+      window.removeEventListener("keypress", keypressHandler);
+      window.removeEventListener("click", clickHandler);
+    };
+  }, [isOpen]);
+
+  return { isOpen, setIsOpen };
+}
+
+/**
+ * @param {Object} props
+ * @param {string} props.url
+ * @returns {any}
+ */
+function DisplayURL(props) {
+  const rawURL = props.url;
+  const dispatch = ReactRedux.useDispatch();
+  const { isOpen, setIsOpen } = useOpenCloseBehavior();
+
+  let url;
+  try {
+    url = new URL(rawURL);
+  } catch (error) {
+    return rawURL;
+  }
+  const { host } = url;
+  const index = rawURL.indexOf(host) + 1 + host.length;
+  //                                   ^ skip the first "/"
+  if (index === -1) {
+    return rawURL;
+  }
+  const urlRest = rawURL.slice(index);
+  let rest = [];
+  if (urlRest.length) {
+    rest.push(
+      span({ className: "historyResultsUrlSlash" }, "/"),
+      span({ className: "historyResultsUrlRest" }, urlRest)
+    );
+  }
+
+  let menu = null;
+  if (isOpen) {
+    menu = div(
+      { className: "historyHostMenu" },
+      button(
+        {
+          className: "historyHostMenuItem",
+          onClick: () => {
+            dispatch(Actions.addSiteToSearchString(host));
+
+            // TODO - Is there a more react-y way to do this?
+            const input = /** @type {HTMLInputElement | undefined} */ (document.querySelector(
+              ".historyInput"
+            ));
+            input?.focus();
+          },
+        },
+        "Search only this site"
+      ),
+      button({ className: "historyHostMenuItem" }, "Forget about site")
+    );
+  }
+
+  return span(
+    { className: "historyResultsUrlRow" },
+    menu,
+    button(
+      { className: "historyResultsUrlHost", onClick: () => setIsOpen(true) },
+      url.host
+    ),
+    ...rest
+  );
+}
+
+/**
+ * @param {Object} props
+ * @param {string} [props.text]
+ */
+function ApplyBoldTags({ text }) {
+  if (!text) {
+    return null;
+  }
+  const parts = [];
+  const chunks = text.split("<b>");
+  parts.push(chunks[0]);
+  for (const chunk of chunks.slice(1)) {
+    const [innerText, ...rest] = chunk.split("</b>");
+    parts.push(b(null, innerText), ...rest);
+  }
+  return parts;
+}
+
+function MoreOptions() {
+  const { isOpen, setIsOpen } = useOpenCloseBehavior();
+
+  let menu = null;
+  if (isOpen) {
+    menu = div(
+      { className: "historyMoreOptionsMenu" },
+      button({ className: "historyHostMenuItem" }, "Forget this page"),
+      button({ className: "historyHostMenuItem" }, "Forget this site"),
+      button({ className: "historyHostMenuItem" }, "Add as bookmark")
+    );
+  }
+
+  return button(
+    { className: "historyMoreOptions", onClick: () => setIsOpen(true) },
+    span(
+      // TODO - Do not use a random unicode glyph here.
+      {
+        style: {
+          fontSize: "20px",
+          position: "relative",
+          display: "inline-block",
+          left: "-2px",
+        },
+      },
+      "⠸"
+    ),
+    menu
+  );
+}
diff --git a/browser/components/history-plus/src/reducers.js b/browser/components/history-plus/src/reducers.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/reducers.js
@@ -0,0 +1,36 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+
+import { Redux } from "./vendor.js";
+
+/**
+ * @param {string} state
+ * @param {HistoryPlus.Action} action
+ */
+function searchString(state = "", action) {
+  switch (action.type) {
+    case "set-search-string":
+      return action.search;
+    default:
+      return state;
+  }
+}
+
+/**
+ * @param {HistoryPlus.HistoryRow[]} state
+ * @param {HistoryPlus.Action} action
+ */
+function historyRows(state = [], action) {
+  switch (action.type) {
+    case "set-history-rows":
+      return action.rows;
+    default:
+      return state;
+  }
+}
+
+export const reducers = Redux.combineReducers({ searchString, historyRows });
diff --git a/browser/components/history-plus/src/selectors.js b/browser/components/history-plus/src/selectors.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/selectors.js
@@ -0,0 +1,20 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+
+/**
+ * @param {HistoryPlus.State} state
+ */
+export function getSearchString(state) {
+  return state.searchString;
+}
+
+/**
+ * @param {HistoryPlus.State} state
+ */
+export function getHistoryRows(state) {
+  return state.historyRows;
+}
diff --git a/browser/components/history-plus/src/utils.js b/browser/components/history-plus/src/utils.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/utils.js
@@ -0,0 +1,177 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+
+/**
+ * @typedef {import("resource://gre/modules/PlacesUtils.jsm")["PlacesUtils"]} PlacesUtils
+ */
+
+/**
+ * @typedef {Awaited<
+ *  ReturnType<(PlacesUtils)["promiseDBConnection"]>
+ * >} Database
+ */
+
+/**
+ * @template T
+ * @param {T | void | null} item
+ * @param {string} [message]
+ * @returns T
+ */
+export function ensureExists(item, message) {
+  if (item === null) {
+    throw new Error(message || "Expected an item to exist, and it was null.");
+  }
+  if (item === undefined) {
+    throw new Error(
+      message || "Expected an item to exist, and it was undefined."
+    );
+  }
+  return item;
+}
+
+export class UnhandledCaseError extends Error {
+  /**
+   * @param {never} value - Check that
+   * @param {string} typeName - A friendly type name.
+   */
+  constructor(value, typeName) {
+    super(`There was an unhandled case for "${typeName}": ${value}`);
+    this.name = "UnhandledCaseError";
+  }
+}
+
+// The text is private to this module:
+const sqlText = Symbol("sqlText");
+
+class SqlState {
+  /**
+   * @param {string} text
+   */
+  constructor(text) {
+    this[sqlText] = text;
+  }
+
+  /**
+   * Run the query.
+   * @param {Database} db
+   * @param {Record<string, string>} [args]
+   */
+  run(db, args) {
+    return db.execute(this[sqlText], args);
+  }
+}
+
+/**
+ * The sql template tag allows for concatenating string values for queries,
+ * while guarding against SQL injections from concatenating unsafe values. The only
+ * values allowed in the ${} injection points are the SqlState objects. These objects
+ * are opaque wrappers over the raw text, which are never exposed to the consuming code.
+ * This should eliminate the sql injection class of errors while still allowing for
+ * dynamic query generation.
+ *
+ * See the docuentation of SqlState.prototype.run for more information on executing
+ * the queries.
+ *
+ * For example:
+ * ```js
+ *   const standardLimit = sql`limit $limit`;
+ *   const query = sql`
+ *     select * from users
+ *     where user.id = $id
+ *     ${standardLimit}
+ *   `;
+ *   query.run(client, query, { id: 10, limit: 20 });
+ * ```
+ *
+ * The following will result in an error, as it's an SQL injection:
+ *
+ * ```js
+ *   const limit = 10;
+ *   const query = sql`
+ *     select * from users
+ *     where user.id = $id
+ *     limit ${limit}
+ *   `;
+ * ```
+ * @param {TemplateStringsArray} strings
+ * @param {Array<SqlState | undefined | null>} sqlStates
+ * @returns {SqlState}
+ */
+export function sql(strings, ...sqlStates) {
+  let text = "";
+
+  // Combine the strings and args
+  for (let i = 0; i < strings.length; i++) {
+    const string = strings[i];
+    text += string;
+
+    const sqlState = sqlStates[i];
+    if (sqlState) {
+      text += sqlState[sqlText];
+    }
+  }
+
+  return new SqlState(text);
+}
+
+/** @type {Console} */
+// @ts-ignore
+export const console = window.console.createInstance({
+  maxLogLevelPref: "browser.contentCache.logLevel",
+  prefix: "history-plus",
+});
+
+/**
+ * Create a more minimalist action logger.
+ * @param {HistoryPlus.Store} store
+ */
+export function reduxLogger(store) {
+  /**
+   * @param {(action: HistoryPlus.Action) => any} nextMiddleware
+   */
+  return function (nextMiddleware) {
+    /** @type {(action: HistoryPlus.Action) => any} */
+    return action => {
+      const style = "font-weight: bold; color: #fa0";
+      const prevState = store.getState();
+      const result = nextMiddleware(action);
+      const nextState = store.getState();
+      console.log(`[action] %c${action.type}`, style, {
+        action,
+        prevState,
+        nextState,
+        stack: (new Error().stack || "(no stack)").split("\n"),
+      });
+      return result;
+    };
+  };
+}
+
+/**
+ * Apply thunks in the redux middleware.
+ *
+ * @param {HistoryPlus.Store} store
+ */
+export function thunkMiddleware({ dispatch, getState }) {
+  /**
+   * @param {(action: HistoryPlus.Action) => any} nextMiddleware
+   */
+  return function (nextMiddleware) {
+    /**
+     * @param {any} actionOrThunk
+     */
+    return actionOrThunk => {
+      if (typeof actionOrThunk === "function") {
+        // This is a thunk, apply it.
+        return actionOrThunk(dispatch, getState);
+      }
+
+      // Apply the normal action.
+      return nextMiddleware(actionOrThunk);
+    };
+  };
+}
diff --git a/browser/components/history-plus/src/vendor.js b/browser/components/history-plus/src/vendor.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/src/vendor.js
@@ -0,0 +1,66 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/.
+ */
+
+// @ts-check
+
+/**
+ * This file loads all of the vendor files, and re-exports them using ES modules.
+ */
+
+const { Services } = ChromeUtils.import("resource://gre/modules/Services.jsm");
+const { BrowserLoader } = ChromeUtils.import(
+  "resource://devtools/shared/loader/browser-loader.js"
+);
+const { require } = BrowserLoader({
+  baseURI: "resource://devtools/client/performance-new/",
+  window,
+});
+
+Services.scriptloader.loadSubScript(
+  "resource://activity-stream/vendor/redux.js",
+  window
+);
+
+Services.scriptloader.loadSubScript(
+  "resource://activity-stream/vendor/react.js",
+  window
+);
+
+Services.scriptloader.loadSubScript(
+  "resource://activity-stream/vendor/react-dom.js",
+  window
+);
+
+Services.scriptloader.loadSubScript(
+  "resource://activity-stream/vendor/react-redux.js",
+  window
+);
+
+/**
+ * Coerce to any to read values off the global object.
+ * @type {any}
+ */
+const win = window;
+
+/** @type {import("react")} */
+export const React = win.React;
+
+/** @type {import("redux")} */
+export const Redux = win.Redux;
+
+/** @type {import("react-dom")} */
+export const ReactDOM = win.ReactDOM;
+
+/** @type {import("react-redux")} */
+export const ReactRedux = win.ReactRedux;
+
+/** @type {import("reselect")} */
+export const reselect = require("devtools/client/shared/vendor/reselect");
+
+/** @type {import("react-dom-factories")} */
+export const ReactDOMFactories = require("devtools/client/shared/vendor/react-dom-factories");
+
+/** @type {<T>(func: T, wait: number) => T} */
+export const throttle = require("devtools/shared/throttle.js").throttle;

