# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1696994053 25200
#      Tue Oct 10 20:14:13 2023 -0700
# Node ID 84d1d785aa1296e4b7136e03b9073fdab699bec6
# Parent  7a4c861a2d10a6757c8844de9bd8f71c94cb6150
Bug 1858309 - Include tabs without a container set in the heuristic for guessing the container from external opener

This fixes a bug where we assign a URL into a container when it shouldn't be.

Differential Revision: https://phabricator.services.mozilla.com/D190646

diff --git a/browser/components/contextualidentity/test/browser/browser_guessusercontext.js b/browser/components/contextualidentity/test/browser/browser_guessusercontext.js
--- a/browser/components/contextualidentity/test/browser/browser_guessusercontext.js
+++ b/browser/components/contextualidentity/test/browser/browser_guessusercontext.js
@@ -3,6 +3,7 @@
 
 "use strict";
 
+const DEFAULT = Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID;
 const PERSONAL = 1;
 const WORK = 2;
 const HOST_MOCHI = makeURI(
@@ -43,6 +44,17 @@ add_task(async function test() {
   await openTabInUserContext(HOST_EXAMPLE.spec, PERSONAL);
   is(guessUserContextId(HOST_EXAMPLE), PERSONAL, "one tab - matches container");
   is(guessUserContextId(HOST_MOCHI), null, "one tab - doesn't match container");
+
+  await openTabInUserContext(HOST_MOCHI.spec, PERSONAL);
+  is(guessUserContextId(HOST_MOCHI), PERSONAL, "one tab - matches container");
+  await openTabInUserContext(HOST_MOCHI.spec);
+  await openTabInUserContext(HOST_MOCHI.spec);
+  is(
+    guessUserContextId(HOST_MOCHI),
+    DEFAULT,
+    "can guess guess default container"
+  );
+
   await openTabInUserContext(HOST_EXAMPLE.spec, WORK);
   is(guessUserContextId(HOST_EXAMPLE), PERSONAL, "same number - use first");
   await openTabInUserContext(HOST_EXAMPLE.spec, WORK);
@@ -76,5 +88,9 @@ add_task(async function test() {
     "opener flow"
   );
   is(guessUserContextId(HOST_EXAMPLE), WORK, "still the most common");
-  is(guessUserContextId(HOST_MOCHI), null, "still doesn't match container");
+  is(
+    guessUserContextId(HOST_MOCHI),
+    DEFAULT,
+    "still matches default container"
+  );
 });
diff --git a/browser/modules/URILoadingHelper.sys.mjs b/browser/modules/URILoadingHelper.sys.mjs
--- a/browser/modules/URILoadingHelper.sys.mjs
+++ b/browser/modules/URILoadingHelper.sys.mjs
@@ -772,19 +772,17 @@ export const URILoadingHelper = {
     for (let win of lazy.BrowserWindowTracker.orderedWindows) {
       for (let tab of win.gBrowser.visibleTabs) {
         let { userContextId } = tab;
-        if (userContextId) {
-          let currentURIHost = null;
-          try {
-            currentURIHost = tab.linkedBrowser.currentURI.host;
-          } catch (e) {}
+        let currentURIHost = null;
+        try {
+          currentURIHost = tab.linkedBrowser.currentURI.host;
+        } catch (e) {}
 
-          if (currentURIHost == host) {
-            let count = (containerScores.get(userContextId) ?? 0) + 1;
-            containerScores.set(userContextId, count);
-            if (count > maxCount) {
-              guessedUserContextId = userContextId;
-              maxCount = count;
-            }
+        if (currentURIHost == host) {
+          let count = (containerScores.get(userContextId) ?? 0) + 1;
+          containerScores.set(userContextId, count);
+          if (count > maxCount) {
+            guessedUserContextId = userContextId;
+            maxCount = count;
           }
         }
       }
