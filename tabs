# HG changeset patch
# Parent  bb528a123b65479d96326b5f4d5b7981538542d2

diff --git a/browser/components/about/AboutRedirector.cpp b/browser/components/about/AboutRedirector.cpp
--- a/browser/components/about/AboutRedirector.cpp
+++ b/browser/components/about/AboutRedirector.cpp
@@ -76,6 +76,8 @@ static const RedirEntry kRedirMap[] = {
     {"tabcrashed", "chrome://browser/content/aboutTabCrashed.xhtml",
      nsIAboutModule::URI_SAFE_FOR_UNTRUSTED_CONTENT |
          nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::HIDE_FROM_ABOUTABOUT},
+    {"tabs", "chrome://browser/content/tabsui/tabs.html",
+     nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::IS_SECURE_CHROME_UI},
     {"policies", "chrome://browser/content/policies/aboutPolicies.html",
      nsIAboutModule::ALLOW_SCRIPT | nsIAboutModule::IS_SECURE_CHROME_UI},
     {"privatebrowsing", "chrome://browser/content/aboutPrivateBrowsing.html",
diff --git a/browser/components/about/components.conf b/browser/components/about/components.conf
--- a/browser/components/about/components.conf
+++ b/browser/components/about/components.conf
@@ -29,6 +29,7 @@ pages = [
     'robots',
     'sessionrestore',
     'tabcrashed',
+    'tabs',
     'unloads',
     'welcome',
     'welcomeback',
diff --git a/browser/components/moz.build b/browser/components/moz.build
--- a/browser/components/moz.build
+++ b/browser/components/moz.build
@@ -54,6 +54,7 @@ DIRS += [
     "sessionstore",
     "shell",
     "syncedtabs",
+    "tabsui",
     "tabunloader",
     "translation",
     "uitour",
diff --git a/browser/components/tabsui/content/tabs.html b/browser/components/tabsui/content/tabs.html
new file mode 100644
--- /dev/null
+++ b/browser/components/tabsui/content/tabs.html
@@ -0,0 +1,24 @@
+<!DOCTYPE html>
+<html><head>
+  <meta http-equiv="content-type" content="text/html; charset=UTF-8">
+  <meta charset="utf-8">
+  <style>
+    #container pre {
+      display: inline-grid;
+      grid-template-columns: repeat(5, 1fr);
+      line-height: 1;
+      margin: 5px;
+      font-size: 24px;
+    }
+    #container pre span {
+      cursor: crosshair;
+      user-select: none;
+    }
+  </style>
+</head>
+<body>
+<div id="container">
+
+</div>
+<script src="chrome://browser/content/tabsui/tabs.js"></script>
+</body>
\ No newline at end of file
diff --git a/browser/components/tabsui/content/tabs.js b/browser/components/tabsui/content/tabs.js
new file mode 100644
--- /dev/null
+++ b/browser/components/tabsui/content/tabs.js
@@ -0,0 +1,162 @@
+const { BrowserWindowTracker } = ChromeUtils.import(
+  "resource:///modules/BrowserWindowTracker.jsm"
+);
+
+function getForWindow(win) {
+  let elForTab = tab => {
+    let el = document.createElement("span");
+    el.textContent = tab.pinned
+      ? `ðŸŸª`
+      : tab.getAttribute("pending")
+      ? `ðŸŸ¨`
+      : `ðŸŸ©`;
+    el.addEventListener("click", () => {
+      tab.ownerGlobal.gBrowser.removeTab(tab);
+      render();
+    });
+    el.addEventListener("mouseover", () => {
+      tab.classList.add("fake-hover");
+    });
+    el.addEventListener("mouseout", () => {
+      tab.classList.remove("fake-hover");
+    });
+    return el;
+  };
+  return win.gBrowser.tabs.map(tab => elForTab(tab));
+}
+
+let renderTimeout;
+function render() {
+  clearTimeout(renderTimeout);
+  renderTimeout = null;
+
+  let container = document.querySelector("#container");
+  container.innerText = "";
+  for (let win of BrowserWindowTracker.orderedWindows) {
+    let tabs = getForWindow(win);
+    console.log(tabs);
+    let tabsContainer = document.createElement("pre");
+    tabsContainer.append(...tabs);
+    container.append(tabsContainer);
+  }
+
+  renderTimeout = setTimeout(render, 1000);
+}
+
+render();
+
+// Just for fun - adapted from https://codepen.io/nicksheffield/pen/NNEoLg/
+
+document.body.addEventListener("click", e => {
+  if (e.originalTarget.matches("pre span")) {
+    explode(e);
+  }
+});
+
+function explode(e) {
+  var x = e.clientX;
+  var y = e.clientY;
+  var c = document.createElement("canvas");
+  var ctx = c.getContext("2d");
+  var ratio = window.devicePixelRatio;
+  var particles = [];
+
+  document.body.appendChild(c);
+
+  c.style.position = "absolute";
+  c.style.left = x - 100 + "px";
+  c.style.top = y - 100 + "px";
+  c.style.pointerEvents = "none";
+  c.style.width = 200 + "px";
+  c.style.height = 200 + "px";
+  c.width = 200 * ratio;
+  c.height = 200 * ratio;
+
+  function Particle() {
+    return {
+      x: c.width / 2,
+      y: c.height / 2,
+      radius: r(20, 30),
+      color: "rgb(" + [r(0, 255), r(0, 255), r(0, 255)].join(",") + ")",
+      rotation: r(0, 360, true),
+      speed: r(8, 12),
+      friction: 0.9,
+      opacity: r(0, 0.5, true),
+      yVel: 0,
+      gravity: 0.1,
+    };
+  }
+
+  for (var i = 0; ++i < 25; ) {
+    particles.push(Particle());
+  }
+
+  console.log(particles[0]);
+
+  function render() {
+    ctx.clearRect(0, 0, c.width, c.height);
+
+    particles.forEach(function(p, i) {
+      angleTools.moveOnAngle(p, p.speed);
+
+      p.opacity -= 0.01;
+      p.speed *= p.friction;
+      p.radius *= p.friction;
+
+      p.yVel += p.gravity;
+      p.y += p.yVel;
+
+      if (p.opacity < 0) {
+        return;
+      }
+      if (p.radius < 0) {
+        return;
+      }
+
+      ctx.beginPath();
+      ctx.globalAlpha = p.opacity;
+      ctx.fillStyle = p.color;
+      ctx.arc(p.x, p.y, p.radius, 0, 2 * Math.PI, false);
+      ctx.fill();
+    });
+  }
+
+  (function renderLoop() {
+    requestAnimationFrame(renderLoop);
+    render();
+  })();
+
+  setTimeout(function() {
+    document.body.removeChild(c);
+  }, 3000);
+}
+
+var angleTools = {
+  getAngle(t, n) {
+    var a = n.x - t.x,
+      e = n.y - t.y;
+    return (Math.atan2(e, a) / Math.PI) * 180;
+  },
+  getDistance(t, n) {
+    var a = t.x - n.x,
+      e = t.y - n.y;
+    return Math.sqrt(a * a + e * e);
+  },
+  moveOnAngle(t, n) {
+    var a = this.getOneFrameDistance(t, n);
+    (t.x += a.x), (t.y += a.y);
+  },
+  getOneFrameDistance(t, n) {
+    return {
+      x: n * Math.cos((t.rotation * Math.PI) / 180),
+      y: n * Math.sin((t.rotation * Math.PI) / 180),
+    };
+  },
+};
+function r(a, b, c) {
+  return parseFloat(
+    (Math.random() * ((a ? a : 1) - (b ? b : 0)) + (b ? b : 0)).toFixed(
+      c ? c : 0
+    )
+  );
+}
diff --git a/browser/components/tabsui/jar.mn b/browser/components/tabsui/jar.mn
new file mode 100644
--- /dev/null
+++ b/browser/components/tabsui/jar.mn
@@ -0,0 +1,7 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+browser.jar:
+        content/browser/tabsui/tabs.html          (content/tabs.html)
+        content/browser/tabsui/tabs.js            (content/tabs.js)
diff --git a/browser/components/tabsui/moz.build b/browser/components/tabsui/moz.build
new file mode 100644
--- /dev/null
+++ b/browser/components/tabsui/moz.build
@@ -0,0 +1,11 @@
+# -*- Mode: python; indent-tabs-mode: nil; tab-width: 40 -*-
+# vim: set filetype=python:
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+with Files("*"):
+    BUG_COMPONENT = ("Firefox", "General")
+
+JAR_MANIFESTS += ["jar.mn"]
+
diff --git a/browser/themes/shared/tabs.inc.css b/browser/themes/shared/tabs.inc.css
--- a/browser/themes/shared/tabs.inc.css
+++ b/browser/themes/shared/tabs.inc.css
@@ -589,6 +589,12 @@
 
 /* Tab hover */
 
+
+.tabbrowser-tab.fake-hover > .tab-stack > .tab-background:not([selected=true], [multiselected]) {
+  background-color: color-mix(in srgb, currentColor 11%, transparent);
+}
+
+
 .tabbrowser-tab:hover > .tab-stack > .tab-background:not([selected=true], [multiselected]) {
   background-color: color-mix(in srgb, currentColor 11%, transparent);
 }
