# HG changeset patch
# Parent  cad4f204b5578ab52285f12a07cb753d74cf11ec

diff --git a/devtools/client/jsonview/Sniffer.sys.mjs b/devtools/client/jsonview/Sniffer.sys.mjs
--- a/devtools/client/jsonview/Sniffer.sys.mjs
+++ b/devtools/client/jsonview/Sniffer.sys.mjs
@@ -44,7 +44,7 @@ export class Sniffer {
         request.loadFlags & Ci.nsIChannel.LOAD_DOCUMENT_URI &&
         getContentDisposition(request) != Ci.nsIChannel.DISPOSITION_ATTACHMENT
       ) {
-        console.log("Checking if HAR", request, request.loadInfo, request.loadFlags, request.unstrippedURI);
+        // console.log("Checking if HAR", request, request.loadInfo, request.loadFlags, request.unstrippedURI);
 
         // Check the response content type and if it's a valid type
         // such as application/json or application/manifest+json
diff --git a/devtools/client/jsonview/converter-child.js b/devtools/client/jsonview/converter-child.js
--- a/devtools/client/jsonview/converter-child.js
+++ b/devtools/client/jsonview/converter-child.js
@@ -42,7 +42,10 @@ loader.lazyGetter(this, "jsonViewStrings
  *
  * Inspired by JSON View: https://github.com/bhollis/jsonview/
  */
-function Converter() {}
+function Converter() {
+  this.buffers = [];
+  this.encoded = "";
+}
 
 Converter.prototype = {
   QueryInterface: ChromeUtils.generateQI([
@@ -80,6 +83,10 @@ Converter.prototype = {
     // Decode and insert data.
     const buffer = new ArrayBuffer(count);
     new BinaryInput(inputStream).readArrayBuffer(count, buffer);
+    this.buffers.push(buffer);
+    var uint8View = new Uint8Array(buffer);
+
+    console.log(uint8View, uint8View.length, uint8View[0], uint8View.byteLength);
     this.decodeAndInsertBuffer(buffer);
   },
 
@@ -163,6 +170,39 @@ Converter.prototype = {
     // Flush data if we haven't been canceled.
     if (Components.isSuccessCode(statusCode)) {
       this.decodeAndInsertBuffer(new ArrayBuffer(0), true);
+
+      function mergeArrayBuffers(buffers) {
+        // Calculate total length
+        const totalLength = buffers.reduce((sum, buffer) => sum + buffer.byteLength, 0);
+        
+        // Create a new ArrayBuffer
+        const result = new ArrayBuffer(totalLength);
+        
+        // Create a Uint8Array view of the new ArrayBuffer
+        const uint8Array = new Uint8Array(result);
+        
+        // Copy data from each buffer
+        let offset = 0;
+        for (const buffer of buffers) {
+          uint8Array.set(new Uint8Array(buffer), offset);
+          offset += buffer.byteLength;
+        }
+        
+        return result;
+      }
+
+      const resultBuffer = mergeArrayBuffers(this.buffers);
+      // console.log("Complete", this.buffers, resultBuffer);
+    function isGzipped(buffer) {
+      // Create a Uint8Array view to access the raw bytes
+      const view = new Uint8Array(buffer);
+    
+      // Check if the first two bytes match the gzip signature
+      return view[0] === 0x1F && view[1] === 0x8B;
+    }
+    // console.log(new Uint8Array(this.buffers[0]), resultBuffer, isGzipped(resultBuffer), resultBuffer.length);
+    
+    console.log(new Uint8Array(this.buffers[0]), new TextEncoder().encode(this.encoded));
     }
 
     // Stop the request.
@@ -177,6 +217,12 @@ Converter.prototype = {
     // Decode the buffer into a string.
     const data = this.decoder.decode(buffer, { stream: !flush });
 
+    this.encoded = this.encoded + this.decoder.decode(buffer, { fatal: true });
+
+    // const encoder = new TextEncoder();
+    // const encoded = encoder.encode(data);
+    // const stream = new BufferStream(encoded.buffer, 0, encoded.buffer.byteLength);
+    // console.log(encoded, encoded.buffer.byteLength, encoded.buffer.byteLength);
     // Using `appendData` instead of `textContent +=` is important to avoid
     // repainting previous data.
     this.data.json.appendData(data);
diff --git a/devtools/client/jsonview/json-viewer.js b/devtools/client/jsonview/json-viewer.js
--- a/devtools/client/jsonview/json-viewer.js
+++ b/devtools/client/jsonview/json-viewer.js
@@ -170,6 +170,7 @@ define(function (require) {
 
     // If the JSON has been loaded, parse it immediately before loading the app.
     const jsonString = input.jsonText.textContent;
+    console.log(new TextEncoder().encode(jsonString));
     try {
       input.json = JSON.parse(jsonString);
     } catch (err) {
