# HG changeset patch
# Parent  234423805100e0099316d1c588e9328b50aec573

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -2178,6 +2178,9 @@ pref("browser.toolbars.bookmarks.visibil
 // bookmarks toolbar contextmenu.
 pref("browser.toolbars.bookmarks.showOtherBookmarks", true);
 
+// Visibility of the containers in a window in a sidebar
+pref("browser.toolbars.container_ui", true);
+
 // Prefs to control the Firefox Account toolbar menu.
 // This pref will surface existing Firefox Account information
 // as a button next to the hamburger menu. It allows
diff --git a/browser/base/content/browser-box.inc.xhtml b/browser/base/content/browser-box.inc.xhtml
--- a/browser/base/content/browser-box.inc.xhtml
+++ b/browser/base/content/browser-box.inc.xhtml
@@ -3,12 +3,7 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 <hbox flex="1" id="browser">
-  <hbox id="containerui-sidebar">
-    <vbox>
-      <vbox class="containerui-list-container">
-      </vbox>
-    </vbox>
-  </hbox>
+  <hbox id="containerui-sidebar-spacer"></hbox>
   <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
     <box id="sidebar-header" align="center">
       <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
diff --git a/browser/base/content/browser-containerui.js b/browser/base/content/browser-containerui.js
--- a/browser/base/content/browser-containerui.js
+++ b/browser/base/content/browser-containerui.js
@@ -1,18 +1,19 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
 var ContainerUI = {
-  setSizes() {
-    let marginTop =
-      document.querySelector("#navigator-toolbox").scrollHeight -
-      document.querySelector("#titlebar").scrollHeight;
-    document.querySelector(
-      "#containerui-sidebar"
-    ).style.marginTop = `-${marginTop}px`;
+  show() {
+    this.visible = true;
+    document.documentElement.setAttribute("containerui", "true");
+  },
+  hide() {
+    this.visible = false;
+    document.documentElement.removeAttribute("containerui");
 
-    // Todo: also set margin-inline-start / css variable for relevant titlebar children
   },
   init() {
     let tabParent = document.querySelector(".containerui-list-container");
-    this.setSizes();
-    document.documentElement.setAttribute("containerui", "true");
     // document.documentElement.classList.add("containerui-visible");
     let iconForUserContext = new Map();
 
@@ -65,19 +66,12 @@ var ContainerUI = {
           userContextId
         );
         li.setAttribute("title", label);
-        // let name = identity.l10nID
-        //   ? gNavigatorBundle.getString(identity.l10nID)
-        //   : identity.name;
-
-        // let labelContainer = document.createElement("label");
-        // let label = ContextualIdentityService.getUserContextLabel(userContextId);
-        // labelContainer.append(label);
-        // li.append(labelContainer);
       } else {
         li.classList.add(`default-container`);
       }
 
       li.onclick = () => {
+        console.trace();
         selectUserContextId(userContextId);
       };
 
@@ -92,6 +86,8 @@ var ContainerUI = {
         selectedUserContextId
       );
       // console.log(`Tabs# ${gBrowser.tabs.length}`);
+
+      // Todo expose from gBrowser?
       for (let t of gBrowser.tabs) {
         let { userContextId } = t;
         if (!userContextToTabs.has(userContextId)) {
@@ -100,14 +96,22 @@ var ContainerUI = {
         userContextToTabs.get(userContextId).push(t);
       }
 
+      console.log(userContextToTabs.size, userContextToTabs.has(0));
+
+      if (userContextToTabs.size === 1 && userContextToTabs.has(0)) {
+        ContainerUI.hide();
+      } else {
+        ContainerUI.show();
+      }
+
       let list = document.createElement("ul");
-      let li = createContainerIcon(0);
-      list.append(li);
-      if (selectedUserContextId == 0) {
-        li.setAttribute("selected", "true");
-      } else {
-        li.removeAttribute("selected");
-      }
+      // let li = createContainerIcon(0);
+      // list.append(li);
+      // if (selectedUserContextId == 0) {
+      //   li.setAttribute("selected", "true");
+      // } else {
+      //   li.removeAttribute("selected");
+      // }
 
       for (let userContextId of userContextToTabs.keys()) {
         if (userContextId == 0) {
@@ -143,10 +147,10 @@ var ContainerUI = {
         list.append(li);
       }
 
-      let addLi = document.createElement("li");
-      addLi.classList.add("add-container");
-      addLi.textContent = "+";
-      list.append(addLi);
+      // let addLi = document.createElement("li");
+      // addLi.classList.add("add-container");
+      // addLi.textContent = "+";
+      // list.append(addLi);
 
       tabParent.textContent = "";
       tabParent.append(list);
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -44,16 +44,29 @@ body {
   -moz-box-flex: 1;
 }
 
-.tabbrowser-tab[pinned][hidden] {
+:root[containerui="true"] {
+  --containerui-sidebar-width: 56px;
+  --containerui-sidebar-offset-top: 43px;
+}
+
+
+:root[containerui="true"] .tabbrowser-tab[pinned][hidden] {
+  /* TODO: this probably needs to move into JS to make sure tabbrowser is calculating positions
+     correctly */
   display: none !important;
 }
 
-:root:not([containerui="true"]) #containerui-sidebar {
+:root:not([containerui="true"]) #containerui-sidebar,
+:root:not([containerui="true"]) #containerui-sidebar-spacer {
   display: none;
 }
 
-:root[containerui="true"] #nav-bar,
-:root[containerui="true"] #PersonalToolbar {
+#containerui-sidebar-spacer,
+#containerui-sidebar {
+  width: var(--containerui-sidebar-width);
+}
+
+:root[containerui="true"] #navigator-toolbox > *:not(#titlebar) {
   /* Todo: set this dynamically */
   margin-inline-start: 56px;
 }
@@ -63,8 +76,13 @@ body {
 }
 
 #containerui-sidebar {
+  top: var(--containerui-sidebar-offset-top);
+  bottom: 0;
+  left: 0;
+  position: absolute;
   background: var(--toolbar-bgcolor);
   color: var(--toolbar-color);
+  z-index: 2;
 }
 
 #containerui-sidebar .containerui-list-container {
@@ -112,7 +130,6 @@ body {
   border-left: solid 2px var(--identity-icon-color);
 }
 
-
 /* Set additional backgrounds alignment relative to toolbox */
 
 #navigator-toolbox:-moz-lwtheme {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -12,8 +12,6 @@ var { AppConstants } = ChromeUtils.impor
 );
 ChromeUtils.import("resource://gre/modules/NotificationDB.jsm");
 
-window.ENABLE_CONTAINER_UI = true;
-
 // lazy module getters
 
 XPCOMUtils.defineLazyModuleGetters(this, {
@@ -500,6 +498,24 @@ XPCOMUtils.defineLazyGetter(this, "Win7F
 
 XPCOMUtils.defineLazyPreferenceGetter(
   this,
+  "gContainerUIEnabled",
+  "browser.toolbars.container_ui",
+  false,
+  (aPref, aOldVal, aNewVal) => {
+    console.trace(aPref, aNewVal);
+    // if (window.closed) {
+    //   return;
+    // }
+    // if (aNewVal) {
+    //   ToolbarKeyboardNavigator.init();
+    // } else {
+    //   ToolbarKeyboardNavigator.uninit();
+    // }
+  }
+);
+
+XPCOMUtils.defineLazyPreferenceGetter(
+  this,
   "gToolbarKeyNavEnabled",
   "browser.toolbars.keyboard_navigation",
   false,
@@ -1710,7 +1726,7 @@ var gBrowserInit = {
     delete window._gBrowser;
     gBrowser.init();
 
-    if (window.ENABLE_CONTAINER_UI) {
+    if (gContainerUIEnabled) {
       ContainerUI.init();
     }
 
@@ -6230,7 +6246,7 @@ nsBrowserAccess.prototype = {
           : Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID;
 
         if (
-          window.ENABLE_CONTAINER_UI &&
+          gContainerUIEnabled &&
           userContextId == Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID
         ) {
           userContextId = gBrowser.guessUserContextId(aURI);
@@ -6649,10 +6665,6 @@ function setToolbarVisibility(
     Services.xulStore.persist(toolbar, hidingAttribute);
   }
 
-  if (window.ENABLE_CONTAINER_UI) {
-    ContainerUI.setSizes();
-  }
-
   let eventParams = {
     detail: {
       visible: isVisible,
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -145,6 +145,13 @@
 
 #include navigator-toolbox.inc.xhtml
 
+  <html:div id="containerui-sidebar">
+    <vbox>
+      <vbox class="containerui-list-container">
+      </vbox>
+    </vbox>
+  </html:div>
+
 #include browser-box.inc.xhtml
 
   <html:template id="customizationPanel">
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -2710,7 +2710,7 @@
 
       // Make a new tab inherit the currently selected tab's container.
       // Todo: Maybe make this read some global state on which container is selected instead?
-      if (window.ENABLE_CONTAINER_UI && userContextId == null && !openerTab) {
+      if (gContainerUIEnabled && userContextId == null && !openerTab) {
         userContextId = gBrowser.selectedTab.userContextId;
       }
 
@@ -4695,7 +4695,7 @@
     hideTab(aTab, aSource) {
       if (
         aTab.hidden ||
-        (!window.ENABLE_CONTAINER_UI && aTab.pinned) ||
+        (!gContainerUIEnabled && aTab.pinned) ||
         aTab.selected ||
         aTab.closing ||
         // Tabs that are sharing the screen, microphone or camera cannot be hidden.
