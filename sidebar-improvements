# HG changeset patch
# Parent  234423805100e0099316d1c588e9328b50aec573

diff --git a/browser/app/profile/firefox.js b/browser/app/profile/firefox.js
--- a/browser/app/profile/firefox.js
+++ b/browser/app/profile/firefox.js
@@ -2178,6 +2178,9 @@ pref("browser.toolbars.bookmarks.visibil
 // bookmarks toolbar contextmenu.
 pref("browser.toolbars.bookmarks.showOtherBookmarks", true);
 
+// Visibility of the containers in a window in a sidebar
+pref("browser.toolbars.container_ui", true);
+
 // Prefs to control the Firefox Account toolbar menu.
 // This pref will surface existing Firefox Account information
 // as a button next to the hamburger menu. It allows
diff --git a/browser/base/content/browser-box.inc.xhtml b/browser/base/content/browser-box.inc.xhtml
--- a/browser/base/content/browser-box.inc.xhtml
+++ b/browser/base/content/browser-box.inc.xhtml
@@ -3,12 +3,7 @@
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
 <hbox flex="1" id="browser">
-  <hbox id="containerui-sidebar">
-    <vbox>
-      <vbox class="containerui-list-container">
-      </vbox>
-    </vbox>
-  </hbox>
+  <hbox id="containerui-sidebar-spacer"></hbox>
   <vbox id="sidebar-box" hidden="true" class="chromeclass-extrachrome">
     <box id="sidebar-header" align="center">
       <toolbarbutton id="sidebar-switcher-target" flex="1" class="tabbable">
diff --git a/browser/base/content/browser-containerui.js b/browser/base/content/browser-containerui.js
--- a/browser/base/content/browser-containerui.js
+++ b/browser/base/content/browser-containerui.js
@@ -1,169 +1,158 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+// TODO: handle default container with no tabs but still clicking on it
+// -- or just make sure it gets hidden
+// TODO: be smarter with state transitions for keyboard a11y
+
 var ContainerUI = {
-  setSizes() {
-    let marginTop =
-      document.querySelector("#navigator-toolbox").scrollHeight -
-      document.querySelector("#titlebar").scrollHeight;
-    document.querySelector(
-      "#containerui-sidebar"
-    ).style.marginTop = `-${marginTop}px`;
-
-    // Todo: also set margin-inline-start / css variable for relevant titlebar children
+  _iconForUserContext: new Map(),
+  show() {
+    if (this.initialized) {
+      this.visible = true;
+      document.documentElement.setAttribute("containerui", "true");
+    }
+  },
+  hide() {
+    this.visible = false;
+    document.documentElement.removeAttribute("containerui");
+  },
+  uninit() {
+    this.initialized = false;
+    this.hide();
   },
   init() {
-    let tabParent = document.querySelector(".containerui-list-container");
-    this.setSizes();
-    document.documentElement.setAttribute("containerui", "true");
-    // document.documentElement.classList.add("containerui-visible");
-    let iconForUserContext = new Map();
+    if (this.initialized) {
+      return;
+    }
+    this.initialized = true;
+    this.populateContainerList();
+    this.updateContainerList();
+    document.addEventListener("TabOpen", e => {
+      this.updateContainerList();
+    });
+    document.addEventListener("TabClose", e => {
+      this.updateContainerList();
+    });
+    document.addEventListener("TabSelect", e => {
+      this.updateContainerList();
+    });
+    document.addEventListener("TabAttrModified", e => {
+      this.updateContainerList();
+    });
+  },
 
-    // Todo brand new PB window doesn't have container ui for first tab
-    // Todo group by container
+  // Todo respond to container changes
+  populateContainerList() {
+    let sidebarContainer = document.querySelector("#containerui-sidebar");
+    sidebarContainer.textContent = "";
+    this._iconForUserContext = new Map();
 
-    function selectUserContextId(userContextId) {
-      let reselect = false;
-      for (let t of gBrowser.tabs) {
-        if (t.userContextId !== userContextId) {
-          if (t == gBrowser.selectedTab) {
-            reselect = true;
-          }
-          gBrowser.hideTab(t);
+    // TODO: don't dig around internals here and export identities w/ ensured data as public
+    ContextualIdentityService.ensureDataReady();
+    console.log(ContextualIdentityService._identities);
+    let defaultContainerIcon = this.createContainerIcon(0);
+    this._iconForUserContext.set(0, defaultContainerIcon);
+    sidebarContainer.append(defaultContainerIcon);
+    for (let identity of ContextualIdentityService._identities) {
+      let icon = this.createContainerIcon(identity.userContextId);
+      this._iconForUserContext.set(identity.userContextId, icon);
+      sidebarContainer.append(icon);
+    }
+  },
+
+  updateContainerList() {
+    let userContextToTabs = new Map();
+    let selectedUserContextId = gBrowser.selectedTab.userContextId;
+    // Todo expose from gBrowser?
+    for (let t of gBrowser.tabs) {
+      let { userContextId } = t;
+      if (!userContextToTabs.has(userContextId)) {
+        userContextToTabs.set(userContextId, []);
+      }
+      userContextToTabs.get(userContextId).push(t);
+    }
+
+    if (userContextToTabs.size === 1 && userContextToTabs.has(0)) {
+      this.hide();
+    } else {
+      this.show();
+    }
+
+    for (let [userContextId, container] of this._iconForUserContext.entries()) {
+      container.hidden = !userContextToTabs.has(userContextId);
+      if (userContextToTabs.has(userContextId)) {
+        let selected = userContextId == selectedUserContextId;
+        if (selected) {
+          container.setAttribute("selected", "true");
         } else {
-          gBrowser.showTab(t);
+          container.removeAttribute("selected");
         }
       }
-
-      if (reselect) {
-        for (let t of gBrowser.tabs) {
-          if (t.userContextId === userContextId) {
-            let oldTab = gBrowser.selectedTab;
-            gBrowser.selectedTab = t;
-            gBrowser.hideTab(oldTab);
-            break;
-          }
-        }
-      }
-
-      // Needed when showing the normal tabbrowser to reset pinned area size
-      gBrowser.tabContainer._positionPinnedTabs();
     }
 
-    function createContainerIcon(userContextId) {
-      if (iconForUserContext.has(userContextId)) {
-        return iconForUserContext.get(userContextId);
-      }
-      let identity = ContextualIdentityService.getPublicIdentityFromId(
+    this.selectUserContextId(selectedUserContextId);
+  },
+
+  createContainerIcon(userContextId) {
+    let identity = ContextualIdentityService.getPublicIdentityFromId(
+      userContextId
+    );
+    let container = document.createElement("div");
+    let input = document.createElement("input");
+    input.classList.add("userContext-icon");
+
+    if (identity) {
+      input.classList.add(`identity-color-${identity.color}`);
+      input.classList.add(`identity-icon-${identity.icon}`);
+
+      let label = ContextualIdentityService.getUserContextLabel(
         userContextId
       );
-      let li = document.createElement("li");
-      li.classList.add("userContext-icon");
-
-      if (identity) {
-        li.classList.add(`identity-color-${identity.color}`);
-        li.classList.add(`identity-icon-${identity.icon}`);
-
-        let label = ContextualIdentityService.getUserContextLabel(
-          userContextId
-        );
-        li.setAttribute("title", label);
-        // let name = identity.l10nID
-        //   ? gNavigatorBundle.getString(identity.l10nID)
-        //   : identity.name;
-
-        // let labelContainer = document.createElement("label");
-        // let label = ContextualIdentityService.getUserContextLabel(userContextId);
-        // labelContainer.append(label);
-        // li.append(labelContainer);
-      } else {
-        li.classList.add(`default-container`);
-      }
-
-      li.onclick = () => {
-        selectUserContextId(userContextId);
-      };
-
-      iconForUserContext.set(userContextId, li);
-      return li;
+      input.setAttribute("title", label);
+    } else {
+      input.classList.add(`default-container`);
     }
 
-    function renderAll() {
-      let userContextToTabs = new Map();
-      let selectedUserContextId = gBrowser.selectedTab.userContextId;
-      let identity = ContextualIdentityService.getPublicIdentityFromId(
-        selectedUserContextId
-      );
-      // console.log(`Tabs# ${gBrowser.tabs.length}`);
-      for (let t of gBrowser.tabs) {
-        let { userContextId } = t;
-        if (!userContextToTabs.has(userContextId)) {
-          userContextToTabs.set(userContextId, []);
-        }
-        userContextToTabs.get(userContextId).push(t);
-      }
-
-      let list = document.createElement("ul");
-      let li = createContainerIcon(0);
-      list.append(li);
-      if (selectedUserContextId == 0) {
-        li.setAttribute("selected", "true");
-      } else {
-        li.removeAttribute("selected");
-      }
-
-      for (let userContextId of userContextToTabs.keys()) {
-        if (userContextId == 0) {
-          // Todo sort this instead of duplicating the code above
-          continue;
-        }
+    input.setAttribute("type", "radio");
+    input.name = "container";
+    input.value = userContextId;
+    input.onchange = () => {
+      // console.log("Input change", input.value, input.checked);
+      this.selectUserContextId(userContextId);
+    }
+    container.append(input);
+    return container;
+  },
 
-        //       if (!identity) {
-        //         replaceContainerClass("color", hbox, "");
-        //         hbox.hidden = true;
-        //         return;
-        //       }
-
-        // replaceContainerClass("color", hbox, identity.color);
-
-        // let label = ContextualIdentityService.getUserContextLabel(userContextId);
-        // document.getElementById("userContext-label").setAttribute("value", label);
-        // // Also set the container label as the tooltip so we can only show the icon
-        // // in small windows.
-        // hbox.setAttribute("tooltiptext", label);
-
-        // let indicator = document.getElementById("userContext-indicator");
-        // replaceContainerClass("icon", indicator, identity.icon);
-
-        let li = createContainerIcon(userContextId);
-
-        if (userContextId == selectedUserContextId) {
-          li.setAttribute("selected", "true");
-        } else {
-          li.removeAttribute("selected");
+  selectUserContextId(userContextId) {
+    console.trace(userContextId);
+    let selectNewTab = false;
+    for (let t of gBrowser.tabs) {
+      if (t.userContextId !== userContextId) {
+        if (t == gBrowser.selectedTab) {
+          selectNewTab = true;
         }
-
-        list.append(li);
+        gBrowser.hideTab(t);
+      } else {
+        gBrowser.showTab(t);
       }
-
-      let addLi = document.createElement("li");
-      addLi.classList.add("add-container");
-      addLi.textContent = "+";
-      list.append(addLi);
-
-      tabParent.textContent = "";
-      tabParent.append(list);
-
-      // make sure to switch in case a tab gets reopneed from a different container
-      selectUserContextId(selectedUserContextId);
     }
 
-    // if (gBrowser.selectedBrowser.currentURI.spec == "about:sessionrestore") {
-    //   // document.documentElement.classList.add("containerui-visible");
-    // }
-    renderAll();
-    document.addEventListener("TabOpen", e => {
-      renderAll();
-    });
-    document.addEventListener("TabAttrModified", e => {
-      renderAll();
-    });
+    if (selectNewTab) {
+      for (let t of gBrowser.tabs) {
+        if (t.userContextId === userContextId) {
+          let oldTab = gBrowser.selectedTab;
+          gBrowser.selectedTab = t;
+          gBrowser.hideTab(oldTab);
+          break;
+        }
+      }
+    }
+
+
+    // Needed when showing the normal tabbrowser to reset pinned area size
+    gBrowser.tabContainer._positionPinnedTabs();
   },
 };
diff --git a/browser/base/content/browser.css b/browser/base/content/browser.css
--- a/browser/base/content/browser.css
+++ b/browser/base/content/browser.css
@@ -44,16 +44,29 @@ body {
   -moz-box-flex: 1;
 }
 
-.tabbrowser-tab[pinned][hidden] {
+:root[containerui="true"] {
+  --containerui-sidebar-width: 56px;
+  --containerui-sidebar-offset-top: 43px;
+}
+
+
+:root[containerui="true"] .tabbrowser-tab[pinned][hidden] {
+  /* TODO: this probably needs to move into JS to make sure tabbrowser is calculating positions
+     correctly */
   display: none !important;
 }
 
-:root:not([containerui="true"]) #containerui-sidebar {
+:root:not([containerui="true"]) #containerui-sidebar,
+:root:not([containerui="true"]) #containerui-sidebar-spacer {
   display: none;
 }
 
-:root[containerui="true"] #nav-bar,
-:root[containerui="true"] #PersonalToolbar {
+#containerui-sidebar-spacer,
+#containerui-sidebar {
+  width: var(--containerui-sidebar-width);
+}
+
+:root[containerui="true"] #navigator-toolbox > *:not(#titlebar) {
   /* Todo: set this dynamically */
   margin-inline-start: 56px;
 }
@@ -63,56 +76,36 @@ body {
 }
 
 #containerui-sidebar {
+  top: var(--containerui-sidebar-offset-top);
+  bottom: 0;
+  left: 0;
+  position: absolute;
   background: var(--toolbar-bgcolor);
   color: var(--toolbar-color);
+  z-index: 2;
 }
 
-#containerui-sidebar .containerui-list-container {
-  -moz-box-flex: 1;
-}
-#containerui-sidebar tab {
-  height: 15px !important;
-}
-#containerui-sidebar ul,
-#containerui-sidebar li {
-  list-style: none;
-  padding: 0;
-  margin: 0;
-}
-#containerui-sidebar li {
+#containerui-sidebar input {
+  -moz-appearance: none;
   width: 48px;
   height: 32px;
-  margin: 16px 3px 16px 3px;
+  margin: 5px 3px;
+  padding: 0;
   /* margin-bottom: 16px; */
   /* margin: 16px 0; */
   border-left: solid 2px transparent;
 }
-#containerui-sidebar li.default-container {
+
+#containerui-sidebar input.default-container {
   --identity-icon: url("chrome://browser/skin/fxa/avatar-empty.svg");
   --identity-tab-color: #ccc;
   --identity-icon-color: #ccc;
 }
 
-#containerui-sidebar li.add-container {
-  text-align: center;
-  font-weight: 900;
-  font-size: 24px;
-}
-#containerui-sidebar li.add-container:hover {
-  background: rgba(0, 0, 0, .5);
-}
-/* #containerui-sidebar li label {
-  position: relative;
-  background: orange;
-  top: 32px;
-  text-align: center;
-  display: block;
-} */
-#containerui-sidebar li[selected] {
+#containerui-sidebar div[selected] input {
   border-left: solid 2px var(--identity-icon-color);
 }
 
-
 /* Set additional backgrounds alignment relative to toolbox */
 
 #navigator-toolbox:-moz-lwtheme {
diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -12,8 +12,6 @@ var { AppConstants } = ChromeUtils.impor
 );
 ChromeUtils.import("resource://gre/modules/NotificationDB.jsm");
 
-window.ENABLE_CONTAINER_UI = true;
-
 // lazy module getters
 
 XPCOMUtils.defineLazyModuleGetters(this, {
@@ -500,6 +498,23 @@ XPCOMUtils.defineLazyGetter(this, "Win7F
 
 XPCOMUtils.defineLazyPreferenceGetter(
   this,
+  "gContainerUIEnabled",
+  "browser.toolbars.container_ui",
+  false,
+  (aPref, aOldVal, aNewVal) => {
+    if (window.closed) {
+      return;
+    }
+    if (aNewVal) {
+      ContainerUI.init();
+    } else {
+      ContainerUI.uninit();
+    }
+  }
+);
+
+XPCOMUtils.defineLazyPreferenceGetter(
+  this,
   "gToolbarKeyNavEnabled",
   "browser.toolbars.keyboard_navigation",
   false,
@@ -1710,7 +1725,7 @@ var gBrowserInit = {
     delete window._gBrowser;
     gBrowser.init();
 
-    if (window.ENABLE_CONTAINER_UI) {
+    if (gContainerUIEnabled) {
       ContainerUI.init();
     }
 
@@ -6230,7 +6245,7 @@ nsBrowserAccess.prototype = {
           : Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID;
 
         if (
-          window.ENABLE_CONTAINER_UI &&
+          gContainerUIEnabled &&
           userContextId == Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID
         ) {
           userContextId = gBrowser.guessUserContextId(aURI);
@@ -6649,10 +6664,6 @@ function setToolbarVisibility(
     Services.xulStore.persist(toolbar, hidingAttribute);
   }
 
-  if (window.ENABLE_CONTAINER_UI) {
-    ContainerUI.setSizes();
-  }
-
   let eventParams = {
     detail: {
       visible: isVisible,
diff --git a/browser/base/content/browser.xhtml b/browser/base/content/browser.xhtml
--- a/browser/base/content/browser.xhtml
+++ b/browser/base/content/browser.xhtml
@@ -145,6 +145,9 @@
 
 #include navigator-toolbox.inc.xhtml
 
+  <html:div id="containerui-sidebar">
+  </html:div>
+
 #include browser-box.inc.xhtml
 
   <html:template id="customizationPanel">
diff --git a/browser/base/content/tabbrowser.js b/browser/base/content/tabbrowser.js
--- a/browser/base/content/tabbrowser.js
+++ b/browser/base/content/tabbrowser.js
@@ -2710,7 +2710,7 @@
 
       // Make a new tab inherit the currently selected tab's container.
       // Todo: Maybe make this read some global state on which container is selected instead?
-      if (window.ENABLE_CONTAINER_UI && userContextId == null && !openerTab) {
+      if (gContainerUIEnabled && userContextId == null && !openerTab) {
         userContextId = gBrowser.selectedTab.userContextId;
       }
 
@@ -4695,7 +4695,7 @@
     hideTab(aTab, aSource) {
       if (
         aTab.hidden ||
-        (!window.ENABLE_CONTAINER_UI && aTab.pinned) ||
+        (!gContainerUIEnabled && aTab.pinned) ||
         aTab.selected ||
         aTab.closing ||
         // Tabs that are sharing the screen, microphone or camera cannot be hidden.
