# HG changeset patch
# Parent  fbb8568e290d869e3b8c6d806610ab385496b1af

diff --git a/browser/components/translation/GoogleTranslator.jsm b/browser/components/translation/GoogleTranslator.jsm
--- a/browser/components/translation/GoogleTranslator.jsm
+++ b/browser/components/translation/GoogleTranslator.jsm
@@ -73,7 +73,7 @@ GoogleTranslator.prototype = {
 
       // Determine the data for the next request.
       let request = this._generateNextTranslationRequest(currentIndex);
-
+      console.trace(request, currentIndex);
       // Create a real request to the server, and put it on the
       // pending requests list.
       let googleRequest = new GoogleRequest(
@@ -104,6 +104,7 @@ GoogleTranslator.prototype = {
    * @param   request   The GoogleRequest sent to the server.
    */
   _chunkCompleted(googleRequest) {
+    console.trace(googleRequest);
     if (this._parseChunkResult(googleRequest)) {
       this._partialSuccess = true;
       // Count the number of characters successfully translated.
@@ -164,10 +165,12 @@ GoogleTranslator.prototype = {
     let results;
     try {
       let response = googleRequest.networkRequest.response;
-      results = JSON.parse(response).data.translations;
+      results = response.data.translations;
+      // results = JSON.parse(response).data.translations;
     } catch (e) {
-      return false;
+      // return false;
     }
+    console.log(results);
     let len = results.length;
     if (len != googleRequest.translationData.length) {
       // This should never happen, but if the service returns a different number
@@ -266,24 +269,42 @@ GoogleRequest.prototype = {
    * Initiates the request
    */
   fireRequest() {
-    let key =
-      Services.cpmm.sharedData.get("translationKey") ||
-      Services.prefs.getStringPref("browser.translation.google.apiKey", "");
-    if (!key) {
-      return Promise.reject("no API key");
-    }
+    // let key =
+    //   Services.cpmm.sharedData.get("translationKey") ||
+    //   Services.prefs.getStringPref("browser.translation.google.apiKey", "");
+    // if (!key) {
+    //   return Promise.reject("no API key");
+    // }
 
     // Prepare the request body.
     let postData = [
-      ["key", key],
+      ["key", "key"],
       ["source", this.sourceLanguage],
       ["target", this.targetLanguage],
     ];
 
+    this.networkRequest = {
+      response: {
+        data: {
+          translations: [],
+        },
+      },
+    };
+
     for (let [, text] of this.translationData) {
       postData.push(["q", text]);
       this.characterCount += text.length;
+
+      // fake the request:
+      this.networkRequest.response.data.translations.push({
+        translatedText: "Brian",
+      });
     }
+    console.log(this.networkRequest);
+
+    return new Promise(resolve => {
+      resolve(this);
+    });
 
     // Set up request options.
     return new Promise((resolve, reject) => {
