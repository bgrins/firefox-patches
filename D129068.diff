# HG changeset patch
# Parent  d420f9190e2f35e314aa67ee346650f86451792c

diff --git a/browser/components/migration/tests/marionette/manifest.ini b/browser/components/migration/tests/marionette/manifest.ini
--- a/browser/components/migration/tests/marionette/manifest.ini
+++ b/browser/components/migration/tests/marionette/manifest.ini
@@ -2,3 +2,4 @@
 run-if = buildapp == 'browser'
 
 [test_refresh_firefox.py]
+[test_wireframe.py]
diff --git a/browser/components/migration/tests/marionette/test_wireframe.py b/browser/components/migration/tests/marionette/test_wireframe.py
new file mode 100644
--- /dev/null
+++ b/browser/components/migration/tests/marionette/test_wireframe.py
@@ -0,0 +1,124 @@
+# -*- coding: utf-8 -*-
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+# MOZ_DISABLE_NONLOCAL_CONNECTIONS
+
+from __future__ import absolute_import
+import textwrap
+import urllib
+import time
+import subprocess
+import shutil
+import os
+import json
+import tempfile
+from urllib.parse import urlparse
+import distutils.dir_util
+
+from marionette_harness.marionette_test import MarionetteTestCase
+
+class TestEnginesOnRestart(MarionetteTestCase):
+    def setUp(self):
+        super(TestEnginesOnRestart, self).setUp()
+
+    @property
+    def viewport_dimensions(self):
+        return self.marionette.execute_script(
+            "return [window.innerWidth, window.innerHeight];"
+        )
+
+    def save_for_url(self, dirpath, url):
+        script = """
+            return window.document.getWireframe()
+        """
+
+        print("Navigating to " + url)
+
+        self.marionette.navigate(url)
+
+        time.sleep(1)
+        screenpath = os.path.join(dirpath, urlparse(url).netloc + ".png")
+        with open(screenpath, "w+b") as fh:
+            self.marionette.save_screenshot(fh, full=False)
+
+        wireframe = self.marionette.execute_script(textwrap.dedent(script), sandbox="system")
+        wirepath = os.path.join(dirpath, urlparse(url).netloc + ".json")
+
+        with open(wirepath, "w") as f:
+            json.dump(wireframe, f)
+
+  
+    def test_collection(self):
+        dirpath = tempfile.mkdtemp()
+        print(dirpath)
+        sites = [
+          "https://google.com",
+          "https://youtube.com",
+          "https://facebook.com",
+          "https://netflix.com",
+          "https://microsoft.com",
+          "https://twitter.com",
+          "https://instagram.com",
+          # "https://tmall.com",
+          "https://linkedin.com",
+          "https://apple.com",
+          "https://qq.com",
+          "https://baidu.com",
+          "https://wikipedia.org",
+          "https://live.com",
+          "https://sohu.com",
+          "https://googletagmanager.com",
+          "https://yahoo.com",
+          "https://amazon.com",
+          "https://youtu.be",
+          "https://taobao.com",
+          # "https://windowsupdate.com",
+          "https://pinterest.com",
+          # "https://netflix.net",
+          "https://adobe.com",
+          "https://wordpress.org",
+          "https://360.cn",
+          "https://vimeo.com",
+          "https://office.com",
+          "https://jd.com",
+          # "https://microsoftonline.com",
+          "https://zoom.us",
+          # "https://amazonaws.com",
+          "https://bing.com",
+          "https://wordpress.com",
+          # "https://reddit.com",
+          # "https://goo.gl",
+          # "https://doubleclick.net",
+          "https://github.com",
+          # "https://weibo.com",
+          # "https://bit.ly",
+
+          "https://mozilla.org/",
+          "https://www.cbc.ca/",
+          "https://www.bbc.com/"
+        ]
+        for site in sites:
+          print("Loading", site)
+          self.save_for_url(dirpath, site)
+
+        domains = []
+        for site in sites:
+          domains.append(urlparse(site).netloc)
+
+        data = dict([('dimensions', self.viewport_dimensions), ('sites', domains)])
+
+        with open(os.path.join(dirpath, "sites.json"), "w") as f:
+            json.dump(data, f)
+
+        print(dirpath)
+
+        # # Optional glue to publish to a web directory
+        # distutils.dir_util.copy_tree(dirpath, os.path.expanduser("~/Code/skeleton-preview/data"))
+        # optimizeImages = "find ~/Code/skeleton-preview/data -iname \"*.png\" -exec optipng -o1 {} \;"
+        # subprocess.check_output(optimizeImages, shell=True)
+
+        # print(dirpath)
+        # shutil.rmtree(dirpath)
+        self.assertTrue(True)
diff --git a/testing/marionette/mach_commands.py b/testing/marionette/mach_commands.py
--- a/testing/marionette/mach_commands.py
+++ b/testing/marionette/mach_commands.py
@@ -51,7 +51,7 @@ def run_marionette(tests, binary=None, t
     parser.verify_usage(args)
 
     # Causes Firefox to crash when using non-local connections.
-    os.environ["MOZ_DISABLE_NONLOCAL_CONNECTIONS"] = "1"
+    os.environ["MOZ_DISABLE_NONLOCAL_CONNECTIONS"] = "0"
 
     if not args.logger:
         args.logger = commandline.setup_logging(
diff --git a/testing/mozharness/scripts/marionette.py b/testing/mozharness/scripts/marionette.py
--- a/testing/mozharness/scripts/marionette.py
+++ b/testing/mozharness/scripts/marionette.py
@@ -390,7 +390,7 @@ class MarionetteTest(TestingMixin, Mercu
             self.mkdir_p(env["MOZ_UPLOAD_DIR"])
 
         # Causes Firefox to crash when using non-local connections.
-        env["MOZ_DISABLE_NONLOCAL_CONNECTIONS"] = "1"
+        env["MOZ_DISABLE_NONLOCAL_CONNECTIONS"] = "0"
 
         env = self.query_env(partial_env=env)
 
