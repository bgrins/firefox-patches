diff --git a/gfx/2d/DrawTargetRecording.cpp b/gfx/2d/DrawTargetRecording.cpp
--- a/gfx/2d/DrawTargetRecording.cpp
+++ b/gfx/2d/DrawTargetRecording.cpp
@@ -373,10 +373,19 @@
       EnsurePatternDependenciesStored(aPattern);
       mRecorder->RecordEvent(RecordedStrokeCircle(
           this, circle.value(), aPattern, aStrokeOptions, aOptions));
       return;
     }
+
+    auto line = path->AsLine();
+    if (line) {
+      EnsurePatternDependenciesStored(aPattern);
+      mRecorder->RecordEvent(RecordedStrokeLine(this, line->origin,
+                                                line->destination, aPattern,
+                                                aStrokeOptions, aOptions));
+      return;
+    }
   }
 
   RefPtr<PathRecording> pathRecording = EnsurePathStored(aPath);
   EnsurePatternDependenciesStored(aPattern);
 
diff --git a/gfx/2d/PathRecording.h b/gfx/2d/PathRecording.h
--- a/gfx/2d/PathRecording.h
+++ b/gfx/2d/PathRecording.h
@@ -21,10 +21,15 @@
   Point origin;
   float radius;
   bool closed = false;
 };
 
+struct Line {
+  Point origin;
+  Point destination;
+};
+
 class PathOps {
  public:
   PathOps() = default;
 
   template <class S>
@@ -68,10 +73,11 @@
     mPathData.resize(oldSize + sizeof(OpType));
     *reinterpret_cast<OpType*>(mPathData.data() + oldSize) = OpType::OP_CLOSE;
   }
 
   Maybe<Circle> AsCircle() const;
+  Maybe<Line> AsLine() const;
 
   bool IsActive() const { return !mPathData.empty(); }
 
   bool IsEmpty() const;
 
@@ -219,10 +225,11 @@
     EnsurePath();
     return mPath->AsRect();
   }
 
   Maybe<Circle> AsCircle() const { return mPathOps.AsCircle(); }
+  Maybe<Line> AsLine() const { return mPathOps.AsLine(); }
 
   void StreamToSink(PathSink* aSink) const final {
     mPathOps.StreamToSink(*aSink);
   }
 
diff --git a/gfx/2d/PathRecording.cpp b/gfx/2d/PathRecording.cpp
--- a/gfx/2d/PathRecording.cpp
+++ b/gfx/2d/PathRecording.cpp
@@ -141,10 +141,49 @@
   }
 
   return Nothing();
 }
 
+Maybe<Line> PathOps::AsLine() const {
+  if (mPathData.empty()) {
+    return Nothing();
+  }
+
+  Line retval;
+
+  const uint8_t* nextByte = mPathData.data();
+  const uint8_t* end = nextByte + mPathData.size();
+  OpType opType = *reinterpret_cast<const OpType*>(nextByte);
+  nextByte += sizeof(OpType);
+
+  if (opType == OpType::OP_MOVETO) {
+    NEXT_PARAMS(Point)
+    retval.origin = params;
+  } else {
+    return Nothing();
+  }
+
+  if (nextByte >= end) {
+    return Nothing();
+  }
+
+  opType = *reinterpret_cast<const OpType*>(nextByte);
+  nextByte += sizeof(OpType);
+
+  if (opType == OpType::OP_LINETO) {
+    MOZ_ASSERT(nextByte != end);
+
+    NEXT_PARAMS(Point)
+
+    if (nextByte == end) {
+      retval.destination = params;
+      return Some(retval);
+    }
+  }
+
+  return Nothing();
+}
 #undef NEXT_PARAMS
 
 size_t PathOps::NumberOfOps() const {
   size_t size = 0;
   const uint8_t* nextByte = mPathData.data();

