# HG changeset patch
# Parent  d420f9190e2f35e314aa67ee346650f86451792c
./mach run --setpref devtools.netmonitor.har.enableAutoExportToFile=true --jsconsole

Open devtools
Navigate around

diff --git a/browser/actors/DiagnosticsCollectorChild.sys.mjs b/browser/actors/DiagnosticsCollectorChild.sys.mjs
new file mode 100644
--- /dev/null
+++ b/browser/actors/DiagnosticsCollectorChild.sys.mjs
@@ -0,0 +1,30 @@
+/* vim: set ts=2 sw=2 sts=2 et tw=80: */
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+export class DiagnosticsCollectorChild extends JSWindowActorChild {
+  constructor() {
+    super();
+  }
+
+  actorCreated() {}
+
+  handleEvent(event) {
+    // switch (event.)
+    // console.log(event)
+    let content = event.target.ownerGlobal;
+    console.log("Load event");
+    console.log(
+      content.location.toString(),
+      content.windowUtils.framesConstructed,
+      content.windowUtils.framesReflowed,
+      content.windowUtils.paintCount
+    );
+    // console.log(content, content.windowUtils, content.windowUtils.displayDPI);
+  }
+
+  receiveMessage(message) {
+    console.log(message);
+  }
+}
diff --git a/browser/actors/DiagnosticsCollectorParent.sys.mjs b/browser/actors/DiagnosticsCollectorParent.sys.mjs
new file mode 100644
--- /dev/null
+++ b/browser/actors/DiagnosticsCollectorParent.sys.mjs
@@ -0,0 +1,33 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const { BrowserWindowTracker } = ChromeUtils.import(
+  "resource:///modules/BrowserWindowTracker.jsm"
+);
+
+export class DiagnosticsCollectorParent extends JSWindowActorParent {
+  receiveMessage(message) {
+    console.log("DIAGNOSTICS COLLECTOR")
+    let browsingContext = this.manager.browsingContext;
+    let browser = browsingContext.embedderElement;
+    if (!browser) {
+      return; // Can happen sometimes if browser is being destroyed
+    }
+
+    let gBrowser = browser.ownerGlobal.gBrowser;
+
+    switch (message.name) {
+      case "Browser:WindowCreated": {
+        gBrowser.announceWindowCreated(browser, message.data.userContextId);
+        BrowserWindowTracker.windowCreated(browser);
+        break;
+      }
+
+      case "Browser:FirstPaint": {
+        browser.ownerGlobal.gBrowserInit._firstContentWindowPaintDeferred.resolve();
+        break;
+      }
+    }
+  }
+}
diff --git a/browser/actors/moz.build b/browser/actors/moz.build
--- a/browser/actors/moz.build
+++ b/browser/actors/moz.build
@@ -59,6 +59,8 @@ FINAL_TARGET_FILES.actors += [
     "ContextMenuParent.jsm",
     "DecoderDoctorChild.jsm",
     "DecoderDoctorParent.jsm",
+    "DiagnosticsCollectorChild.sys.mjs",
+    "DiagnosticsCollectorParent.sys.mjs",
     "DOMFullscreenChild.jsm",
     "DOMFullscreenParent.jsm",
     "EncryptedMediaChild.jsm",
diff --git a/browser/components/BrowserGlue.jsm b/browser/components/BrowserGlue.jsm
--- a/browser/components/BrowserGlue.jsm
+++ b/browser/components/BrowserGlue.jsm
@@ -499,6 +499,23 @@ let JSWINDOWACTORS = {
     allFrames: true,
   },
 
+  DiagnosticsCollector: {
+    parent: {
+      esModuleURI: "resource:///actors/DiagnosticsCollectorParent.sys.mjs",
+    },
+    child: {
+      esModuleURI: "resource:///actors/DiagnosticsCollectorChild.sys.mjs",
+
+      events: {
+        // DOMDocElementInserted: {},
+        load: { mozSystemGroup: true, capture: true },
+      },
+    },
+
+    messageManagerGroups: ["browsers"],
+    allFrames: true,
+  },
+
   DOMFullscreen: {
     parent: {
       moduleURI: "resource:///actors/DOMFullscreenParent.jsm",
diff --git a/devtools/client/netmonitor/src/har/har-automation.js b/devtools/client/netmonitor/src/har/har-automation.js
--- a/devtools/client/netmonitor/src/har/har-automation.js
+++ b/devtools/client/netmonitor/src/har/har-automation.js
@@ -139,6 +139,7 @@ HarAutomation.prototype = {
     // into a file and use all the default options.
     const data = {
       fileName: Services.prefs.getCharPref(prefDomain + "defaultFileName"),
+      includeResponseBodies: true, // XXX: make this configurable
     };
 
     return this.executeExport(data);
