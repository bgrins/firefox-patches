# HG changeset patch
# User Mats Palmgren <mats@mozilla.com>
# Parent  b11349b0406fac3f80b562b5357070b2d3fa73ac

diff --git a/browser/components/aboutlogins/content/components/login-item.css b/browser/components/aboutlogins/content/components/login-item.css
--- a/browser/components/aboutlogins/content/components/login-item.css
+++ b/browser/components/aboutlogins/content/components/login-item.css
@@ -325,7 +325,7 @@ input[name="password"] {
   /* !important is needed to override common.css styling for checkboxes */
   background-color: transparent !important;
   border-width: 0 !important;
-  background-image: url("chrome://browser/content/aboutlogins/icons/password.svg") !important;
+  background-image: url("resource://gre-resources/password.svg") !important;
   margin-inline: 10px 0 !important;
   cursor: pointer;
   -moz-context-properties: fill;
@@ -344,7 +344,7 @@ input[name="password"] {
 }
 
 .reveal-password-checkbox:checked {
-  background-image: url("chrome://browser/content/aboutlogins/icons/password-hide.svg") !important;
+  background-image: url("resource://gre-resources/password-hide.svg") !important;
 }
 
 .login-item-favicon {
diff --git a/browser/components/aboutlogins/jar.mn b/browser/components/aboutlogins/jar.mn
--- a/browser/components/aboutlogins/jar.mn
+++ b/browser/components/aboutlogins/jar.mn
@@ -30,9 +30,7 @@ browser.jar:
   content/browser/aboutlogins/components/menu-button.js                  (content/components/menu-button.js)
   content/browser/aboutlogins/icons/breached-website.svg                 (content/icons/breached-website.svg)
   content/browser/aboutlogins/icons/favicon.svg                          (content/icons/favicon.svg)
-  content/browser/aboutlogins/icons/password-hide.svg                    (content/icons/password-hide.svg)
   content/browser/aboutlogins/icons/vulnerable-password.svg              (content/icons/vulnerable-password.svg)
-  content/browser/aboutlogins/icons/password.svg                         (content/icons/password.svg)
   content/browser/aboutlogins/icons/intro-illustration.svg               (content/icons/intro-illustration.svg)
   content/browser/aboutlogins/aboutLogins.css                            (content/aboutLogins.css)
   content/browser/aboutlogins/aboutLogins.js                             (content/aboutLogins.js)
diff --git a/dom/base/CharacterData.h b/dom/base/CharacterData.h
--- a/dom/base/CharacterData.h
+++ b/dom/base/CharacterData.h
@@ -89,7 +89,13 @@ class CharacterData : public nsIContent 
   void MarkAsMaybeModifiedFrequently() {
     SetFlags(NS_MAYBE_MODIFIED_FREQUENTLY);
   }
-  void MarkAsMaybeMasked() { SetFlags(NS_MAYBE_MASKED); }
+  void MarkAsMaybeMasked(bool aMasked = true) {
+    if (aMasked) {
+      SetFlags(NS_MAYBE_MASKED);
+    } else {
+      UnsetFlags(NS_MAYBE_MASKED);
+    }
+  }
 
   NS_IMPL_FROMNODE_HELPER(CharacterData, IsCharacterData())
 
diff --git a/dom/html/HTMLInputElement.cpp b/dom/html/HTMLInputElement.cpp
--- a/dom/html/HTMLInputElement.cpp
+++ b/dom/html/HTMLInputElement.cpp
@@ -3986,16 +3986,27 @@ nsresult HTMLInputElement::PostHandleEve
         case eMouseClick: {
           if (!aVisitor.mEvent->DefaultPrevented() &&
               aVisitor.mEvent->IsTrusted() &&
-              mType == FormControlType::InputSearch &&
               aVisitor.mEvent->AsMouseEvent()->mButton ==
                   MouseButton::ePrimary) {
-            if (nsSearchControlFrame* searchControlFrame =
-                    do_QueryFrame(GetPrimaryFrame())) {
-              Element* clearButton = searchControlFrame->GetAnonClearButton();
-              if (clearButton &&
-                  aVisitor.mEvent->mOriginalTarget == clearButton) {
-                SetUserInput(EmptyString(),
-                             *nsContentUtils::GetSystemPrincipal());
+            if (mType == FormControlType::InputSearch) {
+              if (nsSearchControlFrame* searchControlFrame =
+                      do_QueryFrame(GetPrimaryFrame())) {
+                Element* clearButton = searchControlFrame->GetAnonClearButton();
+                if (clearButton &&
+                    aVisitor.mEvent->mOriginalTarget == clearButton) {
+                  SetUserInput(EmptyString(),
+                               *nsContentUtils::GetSystemPrincipal());
+                }
+              }
+            } else if (mType == FormControlType::InputPassword) {
+              if (nsTextControlFrame* textControlFrame =
+                      do_QueryFrame(GetPrimaryFrame())) {
+                Element* revealPassword = textControlFrame->GetRevealPasswordNode();
+                if (revealPassword &&
+                    aVisitor.mEvent->mOriginalTarget == revealPassword) {
+                  textControlFrame->ToggleRevealPassword();
+                  textControlFrame->UpdateRevealPasswordState();
+                }
               }
             }
           }
@@ -6678,6 +6689,14 @@ void HTMLInputElement::OnValueChanged(Va
       searchControlFrame->UpdateClearButtonState();
     }
   }
+
+  // Update reveal password button state on password inputs.
+  if (mType == FormControlType::InputPassword) {
+    if (nsTextControlFrame* textControlFrame =
+            do_QueryFrame(GetPrimaryFrame())) {
+      textControlFrame->UpdateRevealPasswordState();
+    }
+  }
 }
 
 bool HTMLInputElement::HasCachedSelection() {
diff --git a/layout/forms/nsTextControlFrame.cpp b/layout/forms/nsTextControlFrame.cpp
--- a/layout/forms/nsTextControlFrame.cpp
+++ b/layout/forms/nsTextControlFrame.cpp
@@ -19,6 +19,7 @@
 #include "nsNameSpaceManager.h"
 
 #include "nsIContent.h"
+#include "nsICSSDeclaration.h"
 #include "nsIScrollableFrame.h"
 #include "nsPresContext.h"
 #include "nsGkAtoms.h"
@@ -180,6 +181,7 @@ void nsTextControlFrame::DestroyFrom(nsI
   aPostDestroyData.AddAnonymousContent(mRootNode.forget());
   aPostDestroyData.AddAnonymousContent(mPlaceholderDiv.forget());
   aPostDestroyData.AddAnonymousContent(mPreviewDiv.forget());
+  aPostDestroyData.AddAnonymousContent(mRevealPassword.forget());
 
   nsContainerFrame::DestroyFrom(aDestructRoot, aPostDestroyData);
 }
@@ -393,7 +395,7 @@ already_AddRefed<Element> nsTextControlF
     // Additionally, this is a password field, the text node needs to be
     // marked as "maybe masked" unless it's in placeholder.
     if (IsPasswordTextControl()) {
-      textNode->MarkAsMaybeMasked();
+      textNode->MarkAsMaybeMasked(!mIsPasswordRevealed);
     }
   }
   div->AppendChildTo(textNode, false, IgnoreErrors());
@@ -444,9 +446,19 @@ nsresult nsTextControlFrame::CreateAnony
   // background on the placeholder doesn't obscure the caret.
   aElements.AppendElement(mRootNode);
 
+  if (IsPasswordTextControl()) {
+    mRevealPassword = MakeAnonElement(PseudoStyleType::mozTextControlRevealPassword,
+                                      nullptr, nsGkAtoms::button);
+    aElements.AppendElement(mRevealPassword);
+  }
+
   rv = UpdateValueDisplay(false);
   NS_ENSURE_SUCCESS(rv, rv);
 
+  if (IsPasswordTextControl()) {
+    UpdateRevealPasswordState();
+  }
+
   InitializeEagerlyIfNeeded();
   return NS_OK;
 }
@@ -557,6 +569,45 @@ void nsTextControlFrame::CreatePreviewIf
   mPreviewDiv = MakeAnonDivWithTextNode(PseudoStyleType::mozTextControlPreview);
 }
 
+void nsTextControlFrame::UpdateRevealPasswordState() {
+  MOZ_ASSERT(IsPasswordTextControl());
+  if (!mRevealPassword || !mRootNode) {
+    return;
+  }
+  nsIContent* childContent = mRootNode->GetFirstChild();
+  if (!childContent) {
+    return;
+  }
+  Text* textContent = childContent->GetAsText();
+  textContent->MarkAsMaybeMasked(!mIsPasswordRevealed);
+
+  auto* content = HTMLInputElement::FromNode(mContent);
+
+  nsGenericHTMLElement* element = nsGenericHTMLElement::FromNode(mRevealPassword);
+  nsCOMPtr<nsICSSDeclaration> declaration = element->Style();
+  if (content->IsValueEmpty()) {
+    declaration->SetProperty("visibility"_ns, "hidden"_ns, ""_ns,
+                             IgnoreErrors());
+  } else {
+    nsAutoCString dummy;
+    declaration->RemoveProperty("visibility"_ns, dummy, IgnoreErrors());
+  }
+  if (!mIsPasswordRevealed) {
+    nsAutoCString dummy;
+    declaration->RemoveProperty("background-image"_ns,
+                             dummy,
+                             IgnoreErrors());
+  } else {
+    declaration->SetProperty("background-image"_ns,
+                             "url('resource://gre-resources/password-hide.svg')"_ns,
+                             ""_ns,
+                             nsContentUtils::GetSystemPrincipal(),
+                             IgnoreErrors());
+  }
+  PresShell()->FrameNeedsReflow(this, IntrinsicDirty::StyleChange,
+                                NS_FRAME_IS_DIRTY);
+}
+
 void nsTextControlFrame::AppendAnonymousContentTo(
     nsTArray<nsIContent*>& aElements, uint32_t aFilter) {
   if (mPlaceholderDiv && !(aFilter & nsIContent::eSkipPlaceholderContent)) {
@@ -567,6 +618,10 @@ void nsTextControlFrame::AppendAnonymous
     aElements.AppendElement(mPreviewDiv);
   }
 
+  if (mRevealPassword) {
+    aElements.AppendElement(mRevealPassword);
+  }
+
   aElements.AppendElement(mRootNode);
 }
 
@@ -653,7 +708,8 @@ Maybe<nscoord> nsTextControlFrame::Compu
 static bool IsButtonBox(const nsIFrame* aFrame) {
   auto pseudoType = aFrame->Style()->GetPseudoType();
   return pseudoType == PseudoStyleType::mozNumberSpinBox ||
-         pseudoType == PseudoStyleType::mozSearchClearButton;
+         pseudoType == PseudoStyleType::mozSearchClearButton ||
+         pseudoType == PseudoStyleType::mozTextControlRevealPassword;
 }
 
 void nsTextControlFrame::Reflow(nsPresContext* aPresContext,
@@ -1217,9 +1273,8 @@ nsresult nsTextControlFrame::UpdateValue
         nsTextNode(mContent->NodeInfo()->NodeInfoManager());
     textNode->MarkAsMaybeModifiedFrequently();
     if (IsPasswordTextControl()) {
-      textNode->MarkAsMaybeMasked();
+      textNode->MarkAsMaybeMasked(!mIsPasswordRevealed);
     }
-
     mRootNode->AppendChildTo(textNode, aNotify, IgnoreErrors());
     textContent = textNode;
   } else {
diff --git a/layout/forms/nsTextControlFrame.h b/layout/forms/nsTextControlFrame.h
--- a/layout/forms/nsTextControlFrame.h
+++ b/layout/forms/nsTextControlFrame.h
@@ -223,10 +223,17 @@ class nsTextControlFrame : public nsCont
 
   Element* GetPlaceholderNode() const { return mPlaceholderDiv; }
 
+  Element* GetRevealPasswordNode() const { return mRevealPassword; }
+
   // called by the focus listener
   nsresult MaybeBeginSecureKeyboardInput();
   void MaybeEndSecureKeyboardInput();
 
+  void ToggleRevealPassword() {
+    mIsPasswordRevealed = !mIsPasswordRevealed;
+  }
+  void UpdateRevealPasswordState();
+
 #define DEFINE_TEXTCTRL_CONST_FORWARDER(type, name)          \
   type name() const {                                        \
     mozilla::TextControlElement* textControlElement =        \
@@ -351,6 +358,8 @@ class nsTextControlFrame : public nsCont
   RefPtr<Element> mRootNode;
   RefPtr<Element> mPlaceholderDiv;
   RefPtr<Element> mPreviewDiv;
+  // The reveal password button.  Only used for type=password.
+  RefPtr<Element> mRevealPassword;
   RefPtr<nsAnonDivObserver> mMutationObserver;
   // Cache of the |.value| of <input> or <textarea> element without hard-wrap.
   // If its IsVoid() returns true, it doesn't cache |.value|.
@@ -370,6 +379,8 @@ class nsTextControlFrame : public nsCont
   bool mEditorHasBeenInitialized;
   bool mIsProcessing;
 
+  bool mIsPasswordRevealed = false;
+
 #ifdef DEBUG
   bool mInEditorInitialization;
   friend class EditorInitializerEntryTracker;
diff --git a/layout/style/jar.mn b/layout/style/jar.mn
--- a/layout/style/jar.mn
+++ b/layout/style/jar.mn
@@ -30,6 +30,8 @@ toolkit.jar:
    res/accessiblecaret-tilt-right@2x.png     (res/accessiblecaret-tilt-right@2x.png)
    res/accessiblecaret-tilt-right@2.25x.png  (res/accessiblecaret-tilt-right@2.25x.png)
    res/searchfield-cancel.svg                (res/searchfield-cancel.svg)
+   res/password.svg                          (res/password.svg)
+   res/password-hide.svg                     (res/password-hide.svg)
 
 % resource gre-resources %res/
 % resource content-accessible resource://gre/contentaccessible/ contentaccessible=yes
diff --git a/layout/style/nsCSSPseudoElementList.h b/layout/style/nsCSSPseudoElementList.h
--- a/layout/style/nsCSSPseudoElementList.h
+++ b/layout/style/nsCSSPseudoElementList.h
@@ -88,6 +88,10 @@ CSS_PSEUDO_ELEMENT(mozTextControlEditing
 // The element that shows the autofill value.
 CSS_PSEUDO_ELEMENT(mozTextControlPreview, ":-moz-text-control-preview",
                    CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS)
+// The reveal password button for <input type=password>.
+CSS_PSEUDO_ELEMENT(mozTextControlRevealPassword,
+                   ":-moz-text-control-reveal-password",
+                   CSS_PSEUDO_ELEMENT_ENABLED_IN_UA_SHEETS)
 
 CSS_PSEUDO_ELEMENT(fileSelectorButton, ":file-selector-button",
                    CSS_PSEUDO_ELEMENT_SUPPORTS_USER_ACTION_STATE)
diff --git a/layout/style/res/forms.css b/layout/style/res/forms.css
--- a/layout/style/res/forms.css
+++ b/layout/style/res/forms.css
@@ -184,6 +184,24 @@ input[type=password]::-moz-text-control-
   unicode-bidi: bidi-override;
 }
 
+input[type=password]::-moz-text-control-reveal-password {
+  display: block;
+  cursor: default;
+  width: 1em;
+  height: 1em;
+  max-height: 100%;
+  max-width: 100%;
+  margin-inline-start: 1px;
+  align-self: center;
+  background-image: url("resource://gre-resources/password.svg");
+  background-repeat: no-repeat;
+  background-position: center;
+  background-size: contain;
+}
+input[type=password]::-moz-text-control-reveal-password[class=hide] {
+ background-image: url("resource://gre-resources/password-hide.svg");
+}
+
 textarea::-moz-text-control-editing-root {
   scroll-behavior: inherit;
   overscroll-behavior: inherit;
diff --git a/browser/components/aboutlogins/content/icons/password-hide.svg b/layout/style/res/password-hide.svg
rename from browser/components/aboutlogins/content/icons/password-hide.svg
rename to layout/style/res/password-hide.svg
diff --git a/browser/components/aboutlogins/content/icons/password.svg b/layout/style/res/password.svg
rename from browser/components/aboutlogins/content/icons/password.svg
rename to layout/style/res/password.svg
diff --git a/xpcom/ds/StaticAtoms.py b/xpcom/ds/StaticAtoms.py
--- a/xpcom/ds/StaticAtoms.py
+++ b/xpcom/ds/StaticAtoms.py
@@ -2452,6 +2452,7 @@ STATIC_ATOMS = [
     PseudoElementAtom("PseudoElement_mozColorSwatch", ":-moz-color-swatch"),
     PseudoElementAtom("PseudoElement_mozTextControlEditingRoot", ":-moz-text-control-editing-root"),
     PseudoElementAtom("PseudoElement_mozTextControlPreview", ":-moz-text-control-preview"),
+    PseudoElementAtom("PseudoElement_mozTextControlRevealPassword", ":-moz-text-control-reveal-password"),
     PseudoElementAtom("PseudoElement_fileSelectorButton", ":file-selector-button"),
     # CSS anonymous boxes -- these must appear in the same order as
     # in nsCSSAnonBoxList.h
