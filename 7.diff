diff --git a/browser/components/migration/tests/marionette/manifest.ini b/browser/components/migration/tests/marionette/manifest.ini
--- a/browser/components/migration/tests/marionette/manifest.ini
+++ b/browser/components/migration/tests/marionette/manifest.ini
@@ -1,5 +1,6 @@
 [DEFAULT]
 run-if = buildapp == 'browser'
 
 [test_refresh_firefox.py]
 [test_build_content_cache.py]
+[test_fill_history.py]
diff --git a/browser/components/migration/tests/marionette/test_fill_history.py b/browser/components/migration/tests/marionette/test_fill_history.py
new file mode 100644
--- /dev/null
+++ b/browser/components/migration/tests/marionette/test_fill_history.py
@@ -0,0 +1,75 @@
+# -*- coding: utf-8 -*-
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+from __future__ import absolute_import
+import time
+import json
+from urllib.parse import urlparse
+import mozprofile
+import random
+import os
+
+from marionette_harness.marionette_test import MarionetteTestCase
+
+
+class TestBuildContentCache(MarionetteTestCase):
+    def setUp(self):
+        super(TestBuildContentCache, self).setUp()
+
+        profile_args = self.marionette.instance.profile_args
+        self.profile = mozprofile.Profile(
+            profile="/Users/greg/dev/gecko/obj-ff-dbg/tmp/profile-_ywnd37f",
+            restore=False,
+        )
+        # Prevent profile from being removed during cleanup
+        self.profile.create_new = False
+
+    def tearDown(self):
+        self.marionette.profile = None
+        self.marionette.quit(clean=True)
+        super(TestBuildContentCache, self).tearDown()
+
+    def test_collection(self):
+        self.marionette.quit()
+        self.marionette.instance._profile = self.profile
+        self.marionette.start_session()
+
+        with open(
+            "/Users/greg/dev/content-caching/data/list/most-recent-urls.json"
+        ) as f:
+            entries = json.load(f)
+            f.close()
+
+        # Go through the list randomly.
+        random.shuffle(entries)
+
+        for entry in entries:
+            hash = hex(entry["url_hash"])[2:]
+            url = entry["url"]
+
+            if not url.startswith("http"):
+                print("Not http or https: ", url)
+                continue
+
+            if url.startswith("http://127.0.0.1"):
+                print("Skipping localhost: ", url)
+                continue
+
+            content_path = os.path.join(
+                "/Users/greg/dev/content-caching/data/cached",
+                hash + "-" + urlparse(url).netloc + ".txt",
+            )
+            if os.path.exists(content_path):
+                print("Already Visited: ", url)
+                continue
+
+            print("Loading: ", url)
+            self.marionette.navigate(url)
+            time.sleep(1)
+
+            with open(content_path, "w") as f:
+                f.write("")
+
+        self.assertTrue(True)

