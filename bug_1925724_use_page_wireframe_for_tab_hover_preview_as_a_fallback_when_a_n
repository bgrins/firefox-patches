# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1729207967 25200
#      Thu Oct 17 16:32:47 2024 -0700
# Node ID 7084f812b5cdca7f4950f94a41f6ea3fd8d5dfd8
# Parent  1fc2a51d27a0c4340b0e92d4cb4b5c017157a286
Bug 1925724 - Use page wireframe for tab hover preview as a fallback when a normal thumnail is not available;r=mconley

This will only work when the pref is enabled (browser.history.collectWireframes), and is being landed primarily
to allow some expanded testing to see if it's worth cleaning this up further and turning it on.

Differential Revision: https://phabricator.services.mozilla.com/D226080

diff --git a/browser/components/sessionstore/PageWireframes.sys.mjs b/browser/components/sessionstore/PageWireframes.sys.mjs
new file mode 100644
--- /dev/null
+++ b/browser/components/sessionstore/PageWireframes.sys.mjs
@@ -0,0 +1,123 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this file,
+ * You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+const lazy = {};
+ChromeUtils.defineESModuleGetters(lazy, {
+  SessionStore: "resource:///modules/sessionstore/SessionStore.sys.mjs",
+});
+
+export const PageWireframes = {
+  /**
+   * Returns the wireframe object for the current index of the session history
+   * for the given tab. The wireframe will only exist with browser.history.collectWireframes.
+   *
+   * @param {Object} tab
+   * @return {Object} wireframe
+   *   See dom/webidl/Document.webidl for the Wireframe dictionary
+   */
+  getWireframeState(tab) {
+    if (!tab) {
+      return null;
+    }
+    const sessionHistory = lazy.SessionStore.getSessionHistory(tab);
+    return sessionHistory?.entries[sessionHistory.index]?.wireframe;
+  },
+
+  /**
+   * Returns an SVG preview for the wireframe at the current index of the session history
+   * for the given tab. The wireframe will only exist with browser.history.collectWireframes.
+   *
+   * @param {Object} tab
+   * @return {SVGElement}
+   */
+  getWireframeElementForTab(tab) {
+    const wireframe = this.getWireframeState(tab);
+    return wireframe && this.getWireframeElement(wireframe, tab.ownerDocument);
+  },
+
+  /**
+   * Converts a color encoded as a uint32_t (Gecko's nscolor format)
+   * to an rgb string.
+   *
+   * @param {Number} nscolor
+   *   An RGB color encoded in nscolor format.
+   * @return {String}
+   *   A string of the form "rgb(r, g, b)".
+   */
+  nscolorToRGB(nscolor) {
+    let r = nscolor & 0xff;
+    let g = (nscolor >> 8) & 0xff;
+    let b = (nscolor >> 16) & 0xff;
+    return `rgb(${r}, ${g}, ${b})`;
+  },
+
+  /**
+   * Converts a color encoded as a uint32_t (Gecko's nscolor format)
+   * to an rgb string.
+   *
+   * @param {Object} wireframe
+   *   See Bug 1731714 and dom/webidl/Document.webidl for the Wireframe dictionary
+   * @param {Document} document
+   *   A Document to crate SVG elements.
+   * @return {SVGElement}
+   *   The rendered wireframe
+   */
+  getWireframeElement(wireframe, document) {
+    const SVG_NS = "http://www.w3.org/2000/svg";
+    let svg = document.createElementNS(SVG_NS, "svg");
+
+    // Currently guessing width & height from rects on the object, it would be better to
+    // save these on the wireframe object itself.
+    let width = wireframe.rects.reduce(
+      (max, rect) => Math.max(max, rect.x + rect.width),
+      0
+    );
+    let height = wireframe.rects.reduce(
+      (max, rect) => Math.max(max, rect.y + rect.height),
+      0
+    );
+
+    svg.setAttributeNS(null, "viewBox", `0 0 ${width} ${height}`);
+    svg.style.backgroundColor = this.nscolorToRGB(wireframe.canvasBackground);
+
+    const DEFAULT_FILL = "color-mix(in srgb, black 10%, transparent)";
+
+    for (let rectObj of wireframe.rects) {
+      // For now we'll skip rects that have an unknown classification, since
+      // it's not clear how we should treat them.
+      if (rectObj.type == "unknown") {
+        continue;
+      }
+
+      let rectEl = document.createElementNS(SVG_NS, "rect");
+      rectEl.setAttribute("x", rectObj.x);
+      rectEl.setAttribute("y", rectObj.y);
+      rectEl.setAttribute("width", rectObj.width);
+      rectEl.setAttribute("height", rectObj.height);
+
+      let fill;
+      switch (rectObj.type) {
+        case "background": {
+          fill = this.nscolorToRGB(rectObj.color);
+          break;
+        }
+        case "image": {
+          fill = rectObj.color
+            ? this.nscolorToRGB(rectObj.color)
+            : DEFAULT_FILL;
+          break;
+        }
+        case "text": {
+          fill = DEFAULT_FILL;
+          break;
+        }
+      }
+
+      rectEl.setAttribute("fill", fill);
+
+      svg.appendChild(rectEl);
+    }
+    return svg;
+  },
+};
diff --git a/browser/components/sessionstore/moz.build b/browser/components/sessionstore/moz.build
--- a/browser/components/sessionstore/moz.build
+++ b/browser/components/sessionstore/moz.build
@@ -12,6 +12,7 @@ JAR_MANIFESTS += ["jar.mn"]
 
 EXTRA_JS_MODULES.sessionstore = [
     "GlobalState.sys.mjs",
+    "PageWireframes.sys.mjs",
     "RecentlyClosedTabsAndWindowsMenuUtils.sys.mjs",
     "RunState.sys.mjs",
     "SessionCookies.sys.mjs",
diff --git a/browser/components/sessionstore/test/browser.toml b/browser/components/sessionstore/test/browser.toml
--- a/browser/components/sessionstore/test/browser.toml
+++ b/browser/components/sessionstore/test/browser.toml
@@ -315,3 +315,5 @@ skip-if = [
 ["browser_windowRestore_perwindowpb.js"]
 
 ["browser_windowStateContainer.js"]
+
+["browser_wireframe_basic.js"]
diff --git a/browser/components/sessionstore/test/browser_sessionHistory.js b/browser/components/sessionstore/test/browser_sessionHistory.js
--- a/browser/components/sessionstore/test/browser_sessionHistory.js
+++ b/browser/components/sessionstore/test/browser_sessionHistory.js
@@ -291,38 +291,3 @@ add_task(async function test_slow_subfra
   // Cleanup.
   gBrowser.removeTab(tab);
 });
-
-/**
- * Ensure that document wireframes can be persisted when they're enabled.
- */
-add_task(async function test_wireframes() {
-  // Wireframes only works when Fission is enabled.
-  if (!Services.appinfo.fissionAutostart) {
-    ok(true, "Skipping test_wireframes when Fission is not enabled.");
-    return;
-  }
-
-  await SpecialPowers.pushPrefEnv({
-    set: [["browser.history.collectWireframes", true]],
-  });
-
-  let tab = BrowserTestUtils.addTab(gBrowser, "http://example.com");
-  let browser = tab.linkedBrowser;
-  await promiseBrowserLoaded(browser);
-
-  await TabStateFlusher.flush(browser);
-  let { entries } = JSON.parse(ss.getTabState(tab));
-
-  // Check the number of children.
-  is(entries.length, 1, "there is one shistory entry");
-
-  // Check for the wireframe
-  ok(entries[0].wireframe, "A wireframe was captured and serialized.");
-  ok(
-    entries[0].wireframe.rects.length,
-    "Several wireframe rects were captured."
-  );
-
-  // Cleanup.
-  gBrowser.removeTab(tab);
-});
diff --git a/browser/components/sessionstore/test/browser_wireframe_basic.js b/browser/components/sessionstore/test/browser_wireframe_basic.js
new file mode 100644
--- /dev/null
+++ b/browser/components/sessionstore/test/browser_wireframe_basic.js
@@ -0,0 +1,42 @@
+/* Any copyright is dedicated to the Public Domain.
+ * http://creativecommons.org/publicdomain/zero/1.0/ */
+
+/**
+ * Ensure that document wireframes are persisted when enabled,
+ * and that we can generate previews for them.
+ */
+add_task(async function thumbnails_wireframe_basic() {
+  // Wireframes only works when Fission is enabled.
+  if (!Services.appinfo.fissionAutostart) {
+    ok(true, "Skipping test_wireframes when Fission is not enabled.");
+    return;
+  }
+
+  await SpecialPowers.pushPrefEnv({
+    set: [["browser.history.collectWireframes", true]],
+  });
+
+  let tab = await BrowserTestUtils.openNewForegroundTab(
+    gBrowser,
+    "https://www.example.com/"
+  );
+  await TabStateFlusher.flush(tab.linkedBrowser);
+  info("Checking a loaded tab");
+  checkWireframeForTab(tab);
+
+  await BrowserTestUtils.switchTab(gBrowser, gBrowser.tabs[0]);
+  gBrowser.discardBrowser(tab, true);
+
+  info("Checking a discarded tab");
+  checkWireframeForTab(tab);
+
+  gBrowser.removeTab(tab);
+});
+
+function checkWireframeForTab(tab) {
+  let wireframe = PageWireframes.getWireframeState(tab);
+  ok(wireframe, "After load: Got wireframe state");
+  Assert.greater(wireframe.rects.length, 0, "After load: Got wireframe rects");
+  let wireframeElement = PageWireframes.getWireframeElementForTab(tab);
+  is(wireframeElement.tagName, "svg", "Got wireframe element");
+}
diff --git a/browser/components/sessionstore/test/head.js b/browser/components/sessionstore/test/head.js
--- a/browser/components/sessionstore/test/head.js
+++ b/browser/components/sessionstore/test/head.js
@@ -33,6 +33,10 @@ const { SessionStoreTestUtils } = Chrome
   "resource://testing-common/SessionStoreTestUtils.sys.mjs"
 );
 
+const { PageWireframes } = ChromeUtils.importESModule(
+  "resource:///modules/sessionstore/PageWireframes.sys.mjs"
+);
+
 const ss = SessionStore;
 SessionStoreTestUtils.init(this, window);
 
diff --git a/browser/components/tabbrowser/content/tab-hover-preview.mjs b/browser/components/tabbrowser/content/tab-hover-preview.mjs
--- a/browser/components/tabbrowser/content/tab-hover-preview.mjs
+++ b/browser/components/tabbrowser/content/tab-hover-preview.mjs
@@ -5,6 +5,10 @@
 var { XPCOMUtils } = ChromeUtils.importESModule(
   "resource://gre/modules/XPCOMUtils.sys.mjs"
 );
+const lazy = {};
+ChromeUtils.defineESModuleGetters(lazy, {
+  PageWireframes: "resource:///modules/sessionstore/PageWireframes.sys.mjs",
+});
 
 const ZERO_DELAY_ACTIVATION_TIME = 300;
 
@@ -55,6 +59,11 @@ export default class TabHoverPreviewPane
       "browser.tabs.tooltipsShowPidAndActiveness",
       false
     );
+    XPCOMUtils.defineLazyPreferenceGetter(
+      this,
+      "_prefCollectWireframes",
+      "browser.history.collectWireframes"
+    );
 
     this._panelOpener = new TabPreviewPanelTimedFunction(
       () => {
@@ -108,6 +117,16 @@ export default class TabHoverPreviewPane
     }
   }
 
+  _hasValidWireframeState(tab) {
+    return (
+      this._prefCollectWireframes &&
+      this._prefDisplayThumbnail &&
+      tab &&
+      !tab.selected &&
+      !!lazy.PageWireframes.getWireframeState(tab)
+    );
+  }
+
   _hasValidThumbnailState(tab) {
     return (
       this._prefDisplayThumbnail &&
@@ -122,6 +141,11 @@ export default class TabHoverPreviewPane
     let tab = this._tab;
 
     if (!this._hasValidThumbnailState(tab)) {
+      let wireframeElement = lazy.PageWireframes.getWireframeElementForTab(tab);
+      if (wireframeElement) {
+        this._thumbnailElement = wireframeElement;
+        this._updatePreview();
+      }
       return;
     }
     let thumbnailCanvas = this._win.document.createElement("canvas");
@@ -229,7 +253,8 @@ export default class TabHoverPreviewPane
     );
     thumbnailContainer.classList.toggle(
       "hide-thumbnail",
-      !this._hasValidThumbnailState(this._tab)
+      !this._hasValidThumbnailState(this._tab) &&
+        !this._hasValidWireframeState(this._tab)
     );
     if (thumbnailContainer.firstChild != this._thumbnailElement) {
       thumbnailContainer.replaceChildren();
diff --git a/browser/components/tabbrowser/test/browser/tabs/browser_tab_preview.js b/browser/components/tabbrowser/test/browser/tabs/browser_tab_preview.js
--- a/browser/components/tabbrowser/test/browser/tabs/browser_tab_preview.js
+++ b/browser/components/tabbrowser/test/browser/tabs/browser_tab_preview.js
@@ -342,6 +342,68 @@ add_task(async function thumbnailTests()
 });
 
 /**
+ * Verify that non-selected tabs display a wireframe in their preview
+ * when enabled, and the tab is unable to provide a thumbnail (e.g. unloaded).
+ */
+add_task(async function wireframeTests() {
+  const { TabStateFlusher } = ChromeUtils.importESModule(
+    "resource:///modules/sessionstore/TabStateFlusher.sys.mjs"
+  );
+  await SpecialPowers.pushPrefEnv({
+    set: [
+      ["browser.tabs.hoverPreview.showThumbnails", true],
+      ["browser.history.collectWireframes", true],
+    ],
+  });
+
+  const tab1 = await BrowserTestUtils.openNewForegroundTab(
+    gBrowser,
+    "data:text/html,<html><head><title>First New Tab</title></head><body>Hello</body></html>"
+  );
+  const tab2 = await BrowserTestUtils.openNewForegroundTab(
+    gBrowser,
+    "about:blank"
+  );
+
+  // Discard the first tab so it can't provide a thumbnail image
+  await TabStateFlusher.flush(tab1.linkedBrowser);
+  gBrowser.discardBrowser(tab1, true);
+
+  const previewPanel = document.getElementById("tab-preview-panel");
+
+  let thumbnailUpdated = BrowserTestUtils.waitForEvent(
+    previewPanel,
+    "previewThumbnailUpdated",
+    false,
+    evt => evt.detail.thumbnail
+  );
+  await openPreview(tab1);
+  await thumbnailUpdated;
+  Assert.ok(
+    previewPanel.querySelectorAll(".tab-preview-thumbnail-container svg")
+      .length,
+    "Tab1 preview contains wireframe"
+  );
+
+  const previewHidden = BrowserTestUtils.waitForPopupEvent(
+    previewPanel,
+    "hidden"
+  );
+
+  BrowserTestUtils.removeTab(tab1);
+  BrowserTestUtils.removeTab(tab2);
+  await SpecialPowers.popPrefEnv();
+
+  // Removing the tab should close the preview.
+  await previewHidden;
+
+  // Move the mouse outside of the tab strip.
+  EventUtils.synthesizeMouseAtCenter(document.documentElement, {
+    type: "mouseover",
+  });
+});
+
+/**
  * make sure delay is applied when mouse leaves tabstrip
  * but not when moving between tabs on the tabstrip
  */
