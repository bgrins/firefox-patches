# HG changeset patch
# Parent  35e0f56e265b1b91bb04528b9fe433db5b35376a

diff --git a/browser/components/history-plus/.eslintrc.js b/browser/components/history-plus/.eslintrc.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/.eslintrc.js
@@ -0,0 +1,18 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+ "use strict";
+
+module.exports = {
+  parserOptions: {
+    sourceType: "module",
+  },
+  rules: {
+    // Props are checked by TypeScript, so we don't need dynamic type checking here.
+    "react/prop-types": "off",
+  },
+  extends: [
+    "../../../.eslintrc.js",
+  ]
+};
diff --git a/browser/components/history-plus/@types/gecko.d.ts b/browser/components/history-plus/@types/gecko.d.ts
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/@types/gecko.d.ts
@@ -0,0 +1,280 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This file contains type stubs for loading things from Gecko. Types
+ * were partially taken from: devtools/client/performance-new/@types/gecko.d.ts
+ */
+
+/**
+ * Namespace anything that has its types mocked out here. These definitions are
+ * only "good enough" to get the type checking to pass in this directory.
+ * Eventually some more structured solution should be found. This namespace is
+ * global and makes sure that all the definitions inside do not clash with
+ * naming.
+ */
+declare namespace MockedExports {
+  /**
+   * This interface teaches ChromeUtils.import how to find modules.
+   */
+  interface KnownModules {
+    "resource://gre/modules/Services.jsm":
+      typeof import("resource://gre/modules/Services.jsm");
+    "Services":
+      typeof import("Services");
+    "resource://devtools/shared/Loader.jsm":
+      typeof import("resource://devtools/shared/Loader.jsm");
+    "resource://devtools/shared/loader/browser-loader.js":
+      typeof import("resource://devtools/shared/loader/browser-loader.js");
+    "resource://gre/modules/PlacesUtils.jsm":
+      typeof import("resource://gre/modules/PlacesUtils.jsm");
+  }
+
+  interface ChromeUtils {
+    /**
+     * This function reads the KnownModules and resolves which import to use.
+     * If you are getting the TS2345 error:
+     *
+     *  Argument of type '"resource:///.../file.jsm"' is not assignable to parameter
+     *  of type
+     *
+     * Then add the file path to the KnownModules above.
+     */
+    import: <S extends keyof KnownModules>(module: S) => KnownModules[S];
+  }
+
+  type GetPref<T> = (prefName: string, defaultValue?: T) => T;
+  type SetPref<T> = (prefName: string, value?: T) => T;
+
+  interface nsIURI {}
+
+  type Services = {
+    prefs: {
+      clearUserPref: (prefName: string) => void;
+      getStringPref: GetPref<string>;
+      setStringPref: SetPref<string>;
+      getCharPref: GetPref<string>;
+      setCharPref: SetPref<string>;
+      getIntPref: GetPref<number>;
+      setIntPref: SetPref<number>;
+      getBoolPref: GetPref<boolean>;
+      setBoolPref: SetPref<boolean>;
+      addObserver: any;
+    };
+    scriptloader: {
+      loadSubScript: (path: string, target: any) => any,
+    }
+  };
+
+  const ServicesJSM: {
+    Services: Services;
+  };
+
+  interface BrowserLoaderConfig {
+    baseURI: string;
+    window: Window;
+  }
+  const BrowserLoaderJS: {
+    BrowserLoader: (config: BrowserLoaderConfig) => { require: (path: string) => any };
+  }
+
+  type LoaderJSM = {
+    require: (path: string) => any;
+  }
+  const LoaderJSM: LoaderJSM;
+
+  const Services: Services;
+
+  // https://searchfox.org/mozilla-central/source/toolkit/modules/Sqlite.jsm
+  interface ConnectionData {
+    TRANSACTION_DEFAULT: string;
+    TRANSACTION_DEFERRED: string;
+    TRANSACTION_IMMEDIATE: string;
+    TRANSACTION_EXCLUSIVE: string;
+    unsafeRawConnection(...args: any): any;
+    variableLimit(...args: any): any;
+    getSchemaVersion(...args: any): any;
+    setSchemaVersion(...args: any): any;
+    close(...args: any): any;
+    clone(...args: any): any;
+    executeBeforeShutdown(...args: any): any;
+    executeCached(...args: any): any;
+    execute(sql: string, params?: Record<string, string> | null, onRow?: any | null): Promise<Row[]>;
+    defaultTransactionType(...args: any): any;
+    transactionInProgress(...args: any): any;
+    executeTransaction(...args: any): any;
+    tableExists(...args: any): any;
+    indexExists(...args: any): any;
+    shrinkMemory(...args: any): any;
+    discardCachedStatements(...args: any): any;
+    interrupt(...args: any): any;
+  }
+
+  interface Row {
+    getTypeOfIndex(): any;
+    getInt32(): any;
+    getInt64(): any;
+    getDouble(): any;
+    getUTF8String(): any;
+    getString(): any;
+    getBlob(): any;
+    getBlobAsString(): any;
+    getBlobAsUTF8String(): any;
+    getIsNull(): any;
+    getResultByIndex(index: number): any;
+    getResultByName(column: string): any;
+    numEntries: number;
+    VALUE_TYPE_NULL: number;
+    VALUE_TYPE_INTEGER: number;
+    VALUE_TYPE_FLOAT: number;
+    VALUE_TYPE_TEXT: number;
+    VALUE_TYPE_BLOB: number;
+  }
+
+  interface PlacesUtils {
+    TYPE_X_MOZ_PLACE_CONTAINER: any;
+    TYPE_X_MOZ_PLACE_SEPARATOR: any;
+    TYPE_X_MOZ_PLACE: any;
+    TYPE_X_MOZ_URL: any;
+    TYPE_HTML: any;
+    TYPE_UNICODE: any;
+    TYPE_X_MOZ_PLACE_ACTION: any;
+    LMANNO_FEEDURI: any;
+    LMANNO_SITEURI: any;
+    CHARSET_ANNO: any;
+    MOBILE_ROOT_ANNO: any;
+    TOPIC_SHUTDOWN: any;
+    TOPIC_INIT_COMPLETE: any;
+    TOPIC_DATABASE_LOCKED: any;
+    TOPIC_EXPIRATION_FINISHED: any;
+    TOPIC_FAVICONS_EXPIRED: any;
+    TOPIC_VACUUM_STARTING: any;
+    TOPIC_BOOKMARKS_RESTORE_BEGIN: any;
+    TOPIC_BOOKMARKS_RESTORE_SUCCESS: any;
+    TOPIC_BOOKMARKS_RESTORE_FAILED: any;
+    observers: any;
+    virtualAllBookmarksGuid: any;
+    virtualHistoryGuid: any;
+    virtualDownloadsGuid: any;
+    virtualTagsGuid: any;
+    isVirtualLeftPaneItem: any;
+    asContainer: any;
+    asQuery: any;
+    endl: any;
+    isValidGuid: any;
+    isValidGuidPrefix: any;
+    generateGuidWithPrefix: any;
+    toURI: any;
+    toPRTime: any;
+    toDate: any;
+    toISupportsString: any;
+    getFormattedString: any;
+    getString: any;
+    parseActionUrl: any;
+    isQueryGeneratedFolder: any;
+    nodeIsFolder: any;
+    nodeIsBookmark: any;
+    nodeIsSeparator: any;
+    nodeIsURI: any;
+    nodeIsQuery: any;
+    nodeAncestors: any;
+    validateItemProperties: any;
+    BOOKMARK_VALIDATORS: any;
+    PAGEINFO_VALIDATORS: any;
+    SYNC_BOOKMARK_VALIDATORS: any;
+    SYNC_CHANGE_RECORD_VALIDATORS: any;
+    QueryInterface: any;
+    _shutdownFunctions: any;
+    registerShutdownFunction: any;
+    observe: any;
+    nodeIsHost: any;
+    nodeIsDay: any;
+    nodeIsTagQuery: any;
+    containerTypes: any;
+    nodeIsContainer: any;
+    nodeIsHistoryContainer: any;
+    getConcreteItemId: any;
+    getConcreteItemGuid: any;
+    getReversedHost(host: {host: string}): string;
+    wrapNode: any;
+    unwrapNodes: any;
+    validatePageInfo: any;
+    normalizeToURLOrGUID: any;
+    getFolderContents: any;
+    bookmarksMenuFolderId: any;
+    toolbarFolderId: any;
+    isRootItem: any;
+    getContainerNodeWithOptions: any;
+    hasChildURIs: any;
+    getChildCountForFolder: any;
+    getURLsForContainerNode: any;
+    promiseDBConnection(): Promise<ConnectionData>;
+    promiseLargeCacheDBConnection: any;
+    largeCacheDBConnDeferred: any;
+    promiseUnsafeWritableDBConnection: any;
+    withConnectionWrapper: any;
+    promiseFaviconData: any;
+    urlWithSizeRef: any;
+    promiseItemGuid: any;
+    promiseItemId: any;
+    promiseManyItemIds: any;
+    invalidateCachedGuidFor: any;
+    invalidateCachedGuids: any;
+    promiseBookmarksTree: any;
+    chunkArray: any;
+    sqlBindPlaceholders: any;
+    md5: any;
+    history: any;
+    favicons: any;
+    bookmarks: any;
+    tagging: any;
+    instanceId: any;
+    metadata: any;
+    keywords: any;
+    tagsFolderId: any;
+    placesRootId: any;
+  }
+
+  const PlacesUtilsJSM: {
+    PlacesUtils: PlacesUtils;
+  }
+}
+
+
+declare module "devtools/client/shared/vendor/react-dom-factories" {
+  import * as ReactDomFactories from "react-dom-factories";
+  export = ReactDomFactories;
+}
+
+declare module "devtools/client/shared/vendor/redux" {
+  import * as Redux from "redux";
+  export = Redux;
+}
+
+declare module "devtools/client/shared/vendor/react-redux" {
+  import * as ReactRedux from "react-redux";
+  export = ReactRedux;
+}
+
+declare module "resource://gre/modules/Services.jsm" {
+  export = MockedExports.ServicesJSM;
+}
+
+declare module "Services" {
+  export = MockedExports.Services;
+}
+
+declare module "resource://devtools/shared/Loader.jsm" {
+  export = MockedExports.LoaderJSM;
+}
+
+declare module "resource://devtools/shared/loader/browser-loader.js" {
+  export = MockedExports.BrowserLoaderJS;
+}
+
+declare module "resource://gre/modules/PlacesUtils.jsm" {
+  export = MockedExports.PlacesUtilsJSM;
+}
+
+declare var ChromeUtils: MockedExports.ChromeUtils;
diff --git a/browser/components/history-plus/@types/history.d.ts b/browser/components/history-plus/@types/history.d.ts
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/@types/history.d.ts
@@ -0,0 +1,17 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+
+/**
+ * This namespace provides a convenient global to refer to types for the HistoryPlus
+ * project. Otherwise these types would need to be manually imported via the verbose:
+ *
+ *   import("../../@types/history.d.ts").TypeName
+ *
+ * Instead the type can be accessed via:
+ *
+ *   HistoryPlus.TypeName
+ */
+declare namespace HistoryPlus {
+
+}
diff --git a/browser/components/history-plus/history-plus.css b/browser/components/history-plus/history-plus.css
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/history-plus.css
@@ -0,0 +1,3 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
diff --git a/browser/components/history-plus/index.html b/browser/components/history-plus/index.html
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/index.html
@@ -0,0 +1,20 @@
+<!-- This Source Code Form is subject to the terms of the Mozilla Public
+   - License, v. 2.0. If a copy of the MPL was not distributed with this
+   - file, You can obtain one at http://mozilla.org/MPL/2.0/. -->
+
+<!DOCTYPE html>
+<html>
+  <head>
+    <meta charset="utf-8">
+     <!-- <meta http-equiv="Content-Security-Policy"
+       content="default-src 'none'; style-src chrome: resource:; img-src chrome: resource:; script-src chrome: resource:; object-src 'none'" /> -->
+    <link rel="icon" type="image/png" href="chrome://browser/skin/history.svg" />
+    <link rel="stylesheet" href="chrome://global/skin/global.css" type="text/css"/>
+    <link rel="stylesheet" href="chrome://global/skin/in-content/common.css" type="text/css"/>
+    <link rel="stylesheet" href="chrome://browser/content/history-plus/history-plus.css" type="text/css"/>
+  </head>
+  <body class="theme-body">
+    <div id="root"></div>
+    <script type="module" src="chrome://browser/content/history-plus/initializer.js"></script>
+  </body>
+</html>
diff --git a/browser/components/history-plus/initializer.js b/browser/components/history-plus/initializer.js
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/initializer.js
@@ -0,0 +1,4 @@
+/* This Source Code Form is subject to the terms of the Mozilla Public
+ * License, v. 2.0. If a copy of the MPL was not distributed with this
+ * file, You can obtain one at http://mozilla.org/MPL/2.0/. */
+// @ts-check
diff --git a/browser/components/history-plus/jar.mn b/browser/components/history-plus/jar.mn
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/jar.mn
@@ -0,0 +1,8 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+browser.jar:
+    content/browser/history-plus/history-plus.css      (history-plus.css)
+    content/browser/history-plus/index.html            (index.html)
+    content/browser/history-plus/initializer.js        (initializer.js)
diff --git a/browser/components/history-plus/moz.build b/browser/components/history-plus/moz.build
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/moz.build
@@ -0,0 +1,5 @@
+# This Source Code Form is subject to the terms of the Mozilla Public
+# License, v. 2.0. If a copy of the MPL was not distributed with this
+# file, You can obtain one at http://mozilla.org/MPL/2.0/.
+
+JAR_MANIFESTS += ["jar.mn"]
diff --git a/browser/components/history-plus/package.json b/browser/components/history-plus/package.json
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/package.json
@@ -0,0 +1,21 @@
+{
+  "name": "history-plus",
+  "version": "1.0.0",
+  "scripts": {
+    "test": "tsc",
+    "test-ci": "tsc"
+  },
+  "license": "MPL-2.0",
+  "devDependencies": {
+    "@types/react": "^16.9.32",
+    "@types/react-dom-factories": "^1.0.2",
+    "@types/react-redux": "^7.1.7",
+    "csstype": "^2.6.10",
+    "redux": "^4.0.5",
+    "reselect": "^4.0.0",
+    "typescript": "^4.7.4"
+  },
+  "dependencies": {
+    "@types/react-dom": "^16.9.6"
+  }
+}
diff --git a/browser/components/history-plus/tsconfig.json b/browser/components/history-plus/tsconfig.json
new file mode 100644
--- /dev/null
+++ b/browser/components/history-plus/tsconfig.json
@@ -0,0 +1,28 @@
+{
+  "compilerOptions": {
+    "module": "esnext",
+    // Fix resolving modules, see https://github.com/DefinitelyTyped/DefinitelyTyped/issues/24788
+    "moduleResolution": "node",
+    // Set the baseUrl to the root of the project.
+    "baseUrl": "../../..",
+    // Make the type checking as strict as possible.
+    "strict": true,
+    // TypeScript will check JS files only if they have a @ts-check comment in them.
+    "allowJs": true,
+    // Only type check, don't emit files.
+    "noEmit": true,
+    // Allow esnext syntax. Otherwise the default is ES5 only.
+    "target": "esnext",
+    "lib": ["esnext", "dom"],
+    "noImplicitAny": true,
+  },
+  "files": [
+    "./@types/gecko.d.ts",
+    "./@types/history.d.ts"
+  ],
+  // Add a @ts-check comment to a JS file to start type checking it.
+  "include": ["./**/*.js", "../../../@types/*"],
+  "exclude": [
+    "../../../devtools/client/performance-new"
+  ]
+}
diff --git a/browser/components/moz.build b/browser/components/moz.build
--- a/browser/components/moz.build
+++ b/browser/components/moz.build
@@ -36,6 +36,7 @@ DIRS += [
     "downloads",
     "enterprisepolicies",
     "extensions",
+    "history-plus",
     "firefoxview",
     "ion",
     "messagepreview",
