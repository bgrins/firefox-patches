# HG changeset patch
# Parent  53146dd83988fc4a5717d33236f5ecbb492f423e

diff --git a/browser/actors/ContentCacheParent.jsm b/browser/actors/ContentCacheParent.jsm
--- a/browser/actors/ContentCacheParent.jsm
+++ b/browser/actors/ContentCacheParent.jsm
@@ -5,6 +5,31 @@
 
 var EXPORTED_SYMBOLS = ["ContentCacheParent"];
 
+const { XPCOMUtils } = ChromeUtils.import(
+  "resource://gre/modules/XPCOMUtils.jsm"
+);
+
+const lazy = {};
+ChromeUtils.defineModuleGetter(
+  lazy,
+  "PlacesUtils",
+  "resource://gre/modules/PlacesUtils.jsm"
+);
+
+/**
+ * Set the preference "browser.contentCache.logLevel" to "All" to see all console
+ * messages. They are set to "Error" by default.
+ *
+ * @returns {Log}
+ */
+XPCOMUtils.defineLazyGetter(lazy, "console", () => {
+  return console.createInstance({
+    maxLogLevelPref: "browser.contentCache.logLevel",
+    prefix: "ContentCacheParent",
+  });
+});
+
+
 /**
  * @typedef {Object} PageData
  * @property {string} text
@@ -12,6 +37,10 @@ var EXPORTED_SYMBOLS = ["ContentCachePar
  * @property {string} locale
  */
 
+/**
+ * The ContentCacheParent adds pages to the contentcache.sql file through the
+ * PlacesUtils database API.
+ */
 class ContentCacheParent extends JSWindowActorParent {
   /**
    * @param {{
@@ -21,16 +50,130 @@ class ContentCacheParent extends JSWindo
    */
   receiveMessage(message) {
     switch (message.name) {
-      case "ContentCache:AddPage":
-        this.addPage(message.data);
+      case "ContentCache:AddPage": {
+        const { text, url } = message.data;
+        lazy.PlacesUtils.withConnectionWrapper(
+          "ContentCacheParent.addPage",
+          db => DB.addPage(db, text, url)
+        );
         break;
+      }
+    }
+  }
+}
+
+/**
+ * Static SQLite database functions.
+ */
+class DB {
+  /**
+   * @param {ConnectionData} db
+   * @returns {Promise<null | string>}
+   */
+  static async getPlacesId(db, url) {
+    const places = await db.executeCached(
+      /* sql */ `
+        SELECT id FROM moz_places
+        WHERE url = :url
+      `,
+      { url }
+    );
+    if (places.length !== 1) {
+      lazy.console.error("Unable to find a places entry for URL", url);
+      return null;
+    }
+    return places[0].getResultByName("id");
+  }
+
+  /**
+   * Note: call this in a transaction.
+   *
+   * @param {ConnectionData} db
+   * @param {string} text
+   * @param {number} placesId
+   */
+  static async insertOrUpdateText(db, text, placesId) {
+    // Virtual tables do not support the "upsert" command that can update or insert
+    // in one database call.
+    if (await DB.doesPlaceExistInContentCache(db, placesId)) {
+      await DB.updateText(db, text, placesId);
+    } else {
+      await DB.insertText(db, text, placesId);
     }
   }
 
   /**
-   * @param {PageData} pageData
+   * @param {ConnectionData} db
+   * @param {number} placesId
+   * @returns {Promise<boolean>}
+   */
+  static async doesPlaceExistInContentCache(db, placesId) {
+    const result = await db.executeCached(
+      /* sql */ `
+        SELECT EXISTS(SELECT 1 FROM moz_contentcache_text WHERE rowid=:placesId);
+      `,
+      { placesId }
+    );
+    return result[0].getResultByIndex(0) === 1;
+  }
+
+  /**
+   * @param {ConnectionData} db
+   * @param {string} text
+   * @param {number} placesId
+   */
+  static async insertText(db, text, placesId) {
+    await db.executeCached(
+      /* sql */ `
+        INSERT INTO moz_contentcache_text(rowid, text)
+        VALUES (:placesId, :text)
+      `,
+      { placesId, text }
+    );
+  }
+
+  /**
+   * @param {ConnectionData} db
+   * @param {string} text
+   * @param {number} placesId
    */
-  addPage(pageData) {
-    console.log(`TODO: ContentCacheParent.addPage`, pageData);
+  static async updateText(db, text, placesId) {
+    await db.executeCached(
+      /* sql */ `
+        UPDATE moz_contentcache_text
+        SET text = :text
+        WHERE rowid = :placesId
+      `,
+      { placesId, text }
+    );
+  }
+
+  /**
+   * @param {ConnectionData} db
+   * @param {string} text
+   * @param {string} url
+   */
+  static async addPage(db, text, url) {
+    await db.executeTransaction(async () => {
+      // Look up the URL in the places database.
+      const placesId = await DB.getPlacesId(db, url);
+      lazy.console.log("Looked up places_id", placesId, url);
+      if (placesId === null) {
+        console.error("Unable to find a places entry for URL", url);
+        return;
+      }
+
+      // Virtual tables do not support the "upsert" command that can update or insert
+      // in one database call.
+      if (await DB.doesPlaceExistInContentCache(db, placesId)) {
+        lazy.console.log("Updating the text");
+        await DB.updateText(db, text, placesId);
+      } else {
+        // This is the first time a URL has been visited for caching.
+        lazy.console.log("Inserting the text");
+        await DB.insertText(db, text, placesId);
+      }
+
+    });
   }
 }
diff --git a/modules/libpref/init/all.js b/modules/libpref/init/all.js
--- a/modules/libpref/init/all.js
+++ b/modules/libpref/init/all.js
@@ -2073,6 +2073,8 @@ pref("dom.ipc.keepProcessesAlive.privile
 pref("svg.disabled", false);
 
 pref("browser.contentCache.enabled", true);
+// Set to "all" to see all logs, which are useful for debuging.
+pref("browser.contentCache.logLevel", "Error");
 
 // Disable e10s for Gecko by default. This is overridden in firefox.js.
 pref("browser.tabs.remote.autostart", false);
