# HG changeset patch
# User Brian Grinstead <bgrinstead@mozilla.com>
# Date 1660671120 25200
#      Tue Aug 16 10:32:00 2022 -0700
# Node ID aa01cd30d1595d972e0295e750975c531fe1e61c
# Parent  af764baf74a1dd0e0b863a8cf26c25266bdcbc14
Bug 1692124 - Proof of concept - guess userContextId for externally opened urls

This isn't intended to land, but it shows a demo of opening the right URL based on
the userContextId of currently opened tabs with the same host.

Differential Revision: https://phabricator.services.mozilla.com/D154812

diff --git a/browser/base/content/browser.js b/browser/base/content/browser.js
--- a/browser/base/content/browser.js
+++ b/browser/base/content/browser.js
@@ -6044,6 +6044,9 @@ nsBrowserAccess.prototype = {
   ) {
     var browsingContext = null;
     var isExternal = !!(aFlags & Ci.nsIBrowserDOMWindow.OPEN_EXTERNAL);
+    var openingUserContextId =
+      (isExternal && guessUserContextId(aURI)) ||
+      Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID;
 
     if (aOpenWindowInfo && isExternal) {
       console.error(
@@ -6149,7 +6152,7 @@ nsBrowserAccess.prototype = {
         let forceNotRemote = aOpenWindowInfo && !aOpenWindowInfo.isRemote;
         let userContextId = aOpenWindowInfo
           ? aOpenWindowInfo.originAttributes.userContextId
-          : Ci.nsIScriptSecurityManager.DEFAULT_USER_CONTEXT_ID;
+          : openingUserContextId;
         let browser = this._openURIInNewTab(
           aURI,
           referrerInfo,
@@ -7014,6 +7017,51 @@ function handleLinkClick(event, href, li
   return true;
 }
 
+// Given a URI, guess which container to use to open it. This is used for external
+// openers as a quality of life improvement (e.g. to open a document into the container
+// where you are logged in to the service that hosts it).
+// For now this can only query open windows, until history is tagged with the container
+// id (https://bugzilla.mozilla.org/show_bug.cgi?id=1283320).
+function guessUserContextId(aURI) {
+  let tabs = [];
+  for (let win of BrowserWindowTracker.orderedWindows) {
+    for (let tab of win.gBrowser.visibleTabs) {
+      // Todo - just filter and count here rather than building up the data
+      // structure and looping again
+      tabs.push({
+        currentURI: tab.linkedBrowser.currentURI,
+        userContextId: tab.userContextId,
+      });
+    }
+  }
+  let matchingContainers = new Map();
+  for (let { currentURI, userContextId } of tabs) {
+    let currentURIHost = null;
+    try {
+      currentURIHost = currentURI.host;
+    } catch (e) {}
+    if (currentURIHost == aURI.host) {
+      if (!matchingContainers.has(userContextId)) {
+        matchingContainers.set(userContextId, 0);
+      }
+      matchingContainers.set(
+        userContextId,
+        matchingContainers.get(userContextId) + 1
+      );
+    }
+  }
+
+  let guessedUserContextId = null;
+  let maxCount = 0;
+  for (let [userContextId, count] of matchingContainers.entries()) {
+    if (count > maxCount) {
+      guessedUserContextId = userContextId;
+      maxCount = count;
+    }
+  }
+  return guessedUserContextId;
+}
+
 /**
  * Handles paste on middle mouse clicks.
  *
diff --git a/browser/components/contextualidentity/test/browser/browser_guessusercontext.js b/browser/components/contextualidentity/test/browser/browser_guessusercontext.js
new file mode 100644
--- /dev/null
+++ b/browser/components/contextualidentity/test/browser/browser_guessusercontext.js
@@ -0,0 +1,8 @@
+/* Any copyright is dedicated to the Public Domain.
+   http://creativecommons.org/publicdomain/zero/1.0/ */
+
+"use strict";
+
+add_task(async function test_TODO() {
+  ok(true, "TODO: implement the test");
+});
